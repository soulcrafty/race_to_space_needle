{"version":3,"sources":["../../../../src/utils/gpu-grid-aggregation/gpu-grid-aggregator.js"],"names":["Buffer","Model","Transform","FEATURES","hasFeatures","isWebGL2","readPixelsToBuffer","fp64","fp64Utils","withParameters","log","worldToPixels","fp64ifyMatrix4","AGGREGATION_OPERATION","DEFAULT_CHANGE_FLAGS","DEFAULT_RUN_PARAMS","MAX_32_BIT_FLOAT","MIN_BLEND_EQUATION","MAX_BLEND_EQUATION","MAX_MIN_BLEND_EQUATION","EQUATION_MAP","ELEMENTCOUNT","DEFAULT_WEIGHT_PARAMS","IDENTITY_MATRIX","PIXEL_SIZE","WEIGHT_SIZE","AGGREGATE_TO_GRID_VS","AGGREGATE_TO_GRID_VS_FP64","AGGREGATE_TO_GRID_FS","AGGREGATE_ALL_VS_FP64","AGGREGATE_ALL_FS","TRANSFORM_MEAN_VS","getFloatTexture","getFramebuffer","getFloatArray","GPUGridAggregator","getAggregationData","aggregationData","maxData","pixelIndex","assert","length","index","cellCount","cellWeight","totalCount","maxCellWieght","getCellData","countsData","size","numCells","cellWeights","Float32Array","cellCounts","Uint32Array","i","sizeIndex","constructor","gl","opts","id","shaderCache","state","weights","gridPositions","positionsBuffer","positions64xyLowBuffer","vertexCount","useGPU","numCol","numRow","windowSize","cellSize","weightAttributes","textures","meanTextures","buffers","framebuffers","maxMinFramebuffers","minFramebuffers","maxFramebuffers","equations","resources","_hasGPUSupport","BLEND_EQUATION_MINMAX","COLOR_ATTACHMENT_RGBA32F","TEXTURE_FLOAT","delete","gridAggregationModel","allAggregationModel","meanTransform","position64Buffer","deleteResources","run","aggregationParams","getAggregationParams","updateGridSize","runAggregationOnGPU","warn","runAggregationOnCPU","Array","isArray","forEach","obj","name","Object","assign","gridTransformMatrix","viewport","projectPoints","changeFlags","cellSizeChanged","setState","validateProps","viewportMatrix","normalizeWeightParams","result","updateObject","shouldTransformToGrid","dataChanged","viewportChanged","width","height","Math","ceil","positions","projectPositions","calculateAggregationData","results","cellIndex","posIndex","values","operation","cellElementIndex","weightComponent","SUM","MEAN","MIN","min","MAX","max","calculateMeanMaxMinData","validCellIndices","needMin","needMax","minData","maxMinData","calculateMinMax","calculateMean","combineMaxMin","count","weight","initCPUResults","aggregationSize","fill","Infinity","gridTransformRequired","pos","posCount","Float64Array","Set","x","y","project","colId","floor","rowId","add","updateAggregationBuffers","updateResultBuffer","bufferName","data","resourceName","subData","createBufferObjects","getAggregateData","aggregationTexture","aggregationBuffer","target","sourceType","maxMinBuffer","minBuffer","maxBuffer","getAggregationModel","vs","fs","modules","drawMode","getAllAggregationModel","isInstanced","instanceCount","attributes","position","getMeanTransform","update","_targetTextureVarying","renderAggregateData","uProjectionMatrixFP64","gridSize","parameters","blend","depthTest","blendFunc","moduleSettings","uniforms","uProjectionMatrix","renderToWeightsTexture","renderToMaxMinTexture","blendEquation","minOrMaxFb","clearParams","clearColor","bind","clear","draw","uSampler","texture","unbind","transformOptions","_sourceTextures","aggregationValues","_targetTexture","elementCount","attach","updateModels","setupFramebuffers","framebufferSize","resize","setupModels","setupWeightAttributes","typedArray","setData","positions64xyLow","aggregationModelAttributes","createPos64xyLow","setVertexCount","setAttributes","setInstanceCount"],"mappings":"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","sourcesContent":["import GL from '@luma.gl/constants';\nimport {\n  Buffer,\n  Model,\n  Transform,\n  FEATURES,\n  hasFeatures,\n  isWebGL2,\n  readPixelsToBuffer,\n  fp64 as fp64Utils,\n  withParameters\n} from '@luma.gl/core';\nimport {log} from '@deck.gl/core';\nimport {worldToPixels} from 'viewport-mercator-project';\nconst {fp64ifyMatrix4} = fp64Utils;\n\nimport {\n  AGGREGATION_OPERATION,\n  DEFAULT_CHANGE_FLAGS,\n  DEFAULT_RUN_PARAMS,\n  MAX_32_BIT_FLOAT,\n  MIN_BLEND_EQUATION,\n  MAX_BLEND_EQUATION,\n  MAX_MIN_BLEND_EQUATION,\n  EQUATION_MAP,\n  ELEMENTCOUNT,\n  DEFAULT_WEIGHT_PARAMS,\n  IDENTITY_MATRIX,\n  PIXEL_SIZE,\n  WEIGHT_SIZE\n} from './gpu-grid-aggregator-constants';\n\nimport AGGREGATE_TO_GRID_VS from './aggregate-to-grid-vs.glsl';\nimport AGGREGATE_TO_GRID_VS_FP64 from './aggregate-to-grid-vs-64.glsl';\nimport AGGREGATE_TO_GRID_FS from './aggregate-to-grid-fs.glsl';\nimport AGGREGATE_ALL_VS_FP64 from './aggregate-all-vs-64.glsl';\nimport AGGREGATE_ALL_FS from './aggregate-all-fs.glsl';\nimport TRANSFORM_MEAN_VS from './transform-mean-vs.glsl';\nimport {getFloatTexture, getFramebuffer, getFloatArray} from './gpu-grid-aggregator-utils.js';\n\nexport default class GPUGridAggregator {\n  // Decode and return aggregation data of given pixel.\n  static getAggregationData({aggregationData, maxData, pixelIndex}) {\n    log.assert(aggregationData.length >= (pixelIndex + 1) * PIXEL_SIZE);\n    log.assert(maxData.length === PIXEL_SIZE);\n    const index = pixelIndex * PIXEL_SIZE;\n    const cellCount = aggregationData[index + 3];\n    const cellWeight = aggregationData[index];\n    const totalCount = maxData[3];\n    const maxCellWieght = maxData[0];\n    return {\n      cellCount,\n      cellWeight,\n      totalCount,\n      maxCellWieght\n    };\n  }\n\n  // Decodes and retuns counts and weights of all cells\n  static getCellData({countsData, size = 1}) {\n    const numCells = countsData.length / 4;\n    const cellWeights = new Float32Array(numCells * size);\n    const cellCounts = new Uint32Array(numCells);\n    for (let i = 0; i < numCells; i++) {\n      // weights in RGB channels\n      for (let sizeIndex = 0; sizeIndex < size; sizeIndex++) {\n        cellWeights[i * size + sizeIndex] = countsData[i * 4 + sizeIndex];\n      }\n      // count in Alpha channel\n      cellCounts[i] = countsData[i * 4 + 3];\n    }\n    return {cellCounts, cellWeights};\n  }\n\n  // DEBUG ONLY\n  // static logData({aggregationBuffer, minBuffer, maxBuffer, maxMinBuffer}) {\n  //   const agrData = aggregationBuffer.getData();\n  //   for (let index = 0; index < agrData.length; index += 4) {\n  //     if (agrData[index + 3] > 0) {\n  //       console.log(\n  //         `index: ${index} weights: ${agrData[index]} ${agrData[index + 1]} ${\n  //           agrData[index + 2]\n  //         } count: ${agrData[index + 3]}`\n  //       );\n  //     }\n  //   }\n  // }\n\n  constructor(gl, opts = {}) {\n    this.id = opts.id || 'gpu-grid-aggregator';\n    this.shaderCache = opts.shaderCache || null;\n    this.gl = gl;\n    this.state = {\n      // cache weights and position data to process when data is not changed\n      weights: null,\n      gridPositions: null,\n      positionsBuffer: null,\n      positions64xyLowBuffer: null,\n      vertexCount: 0,\n\n      // flags/variables that affect the aggregation\n      fp64: null,\n      useGPU: null,\n      numCol: 0,\n      numRow: 0,\n      windowSize: null,\n      cellSize: null,\n\n      // per weight GPU resources\n      weightAttributes: {},\n      textures: {},\n      meanTextures: {},\n      buffers: {},\n      framebuffers: {},\n      maxMinFramebuffers: {},\n      minFramebuffers: {},\n      maxFramebuffers: {},\n      equations: {},\n      // common resources to be deleted\n      resources: {}\n    };\n    this._hasGPUSupport =\n      isWebGL2(gl) && // gl_InstanceID usage in min/max calculation shaders\n      hasFeatures(\n        this.gl,\n        FEATURES.BLEND_EQUATION_MINMAX, // set min/max blend modes\n        FEATURES.COLOR_ATTACHMENT_RGBA32F, // render to float texture\n        FEATURES.TEXTURE_FLOAT // sample from a float texture\n      );\n  }\n\n  // Delete owned resources.\n  /* eslint no-unused-expressions: [\"error\", { \"allowShortCircuit\": true }] */\n  delete() {\n    const {gridAggregationModel, allAggregationModel, meanTransform} = this;\n    const {\n      positionsBuffer,\n      position64Buffer,\n      textures,\n      framebuffers,\n      maxMinFramebuffers,\n      minFramebuffers,\n      maxFramebuffers,\n      meanTextures,\n      resources\n    } = this.state;\n\n    gridAggregationModel && gridAggregationModel.delete();\n    allAggregationModel && allAggregationModel.delete();\n    meanTransform && meanTransform.delete();\n\n    positionsBuffer && positionsBuffer.delete();\n    position64Buffer && position64Buffer.delete();\n    this.deleteResources([\n      framebuffers,\n      textures,\n      maxMinFramebuffers,\n      minFramebuffers,\n      maxFramebuffers,\n      meanTextures,\n      resources\n    ]);\n  }\n\n  // Perform aggregation and retun the results\n  run(opts = {}) {\n    const aggregationParams = this.getAggregationParams(opts);\n    this.updateGridSize(aggregationParams);\n    const {useGPU} = aggregationParams;\n    if (this._hasGPUSupport && useGPU) {\n      return this.runAggregationOnGPU(aggregationParams);\n    }\n    if (useGPU) {\n      log.warn('ScreenGridAggregator: GPU Aggregation not supported, falling back to CPU')();\n    }\n    return this.runAggregationOnCPU(aggregationParams);\n  }\n\n  // PRIVATE\n\n  deleteResources(resources) {\n    resources = Array.isArray(resources) ? resources : [resources];\n    resources.forEach(obj => {\n      for (const name in obj) {\n        obj[name].delete();\n      }\n    });\n  }\n\n  getAggregationParams(opts) {\n    const aggregationParams = Object.assign({}, DEFAULT_RUN_PARAMS, opts);\n    const {\n      useGPU,\n      gridTransformMatrix,\n      viewport,\n      weights,\n      projectPoints,\n      cellSize\n    } = aggregationParams;\n    if (this.state.useGPU !== useGPU) {\n      // CPU/GPU resources need to reinitialized, force set the change flags.\n      aggregationParams.changeFlags = Object.assign(\n        {},\n        aggregationParams.changeFlags,\n        DEFAULT_CHANGE_FLAGS\n      );\n    }\n    if (\n      cellSize &&\n      (!this.state.cellSize ||\n        this.state.cellSize[0] !== cellSize[0] ||\n        this.state.cellSize[1] !== cellSize[1])\n    ) {\n      aggregationParams.changeFlags.cellSizeChanged = true;\n      // For GridLayer aggregation, cellSize is calculated by parsing all input data as it depends\n      // on bounding box, cache cellSize\n      this.setState({cellSize});\n    }\n\n    this.validateProps(aggregationParams, opts);\n\n    this.setState({useGPU});\n    aggregationParams.gridTransformMatrix =\n      (projectPoints ? viewport.viewportMatrix : gridTransformMatrix) || IDENTITY_MATRIX;\n\n    if (weights) {\n      aggregationParams.weights = this.normalizeWeightParams(weights);\n\n      // cache weights to process when only cellSize or viewport is changed.\n      // position data is cached in Buffers for GPU case and in 'gridPositions' for CPU case.\n      this.setState({weights: aggregationParams.weights});\n    }\n    return aggregationParams;\n  }\n\n  normalizeWeightParams(weights) {\n    const result = {};\n    for (const id in weights) {\n      result[id] = Object.assign({}, DEFAULT_WEIGHT_PARAMS, weights[id]);\n    }\n    return result;\n  }\n\n  // Update priveate state\n  setState(updateObject) {\n    Object.assign(this.state, updateObject);\n  }\n\n  shouldTransformToGrid(opts) {\n    const {projectPoints, changeFlags} = opts;\n    if (\n      !this.state.gridPositions ||\n      changeFlags.dataChanged ||\n      (projectPoints && changeFlags.viewportChanged) // world space aggregation (GridLayer) doesn't change when viewport is changed.\n    ) {\n      return true;\n    }\n    return false;\n  }\n\n  updateGridSize(opts) {\n    const {viewport, cellSize} = opts;\n    const width = opts.width || viewport.width;\n    const height = opts.height || viewport.height;\n    const numCol = Math.ceil(width / cellSize[0]);\n    const numRow = Math.ceil(height / cellSize[1]);\n    this.setState({numCol, numRow, windowSize: [width, height]});\n  }\n\n  /* eslint-disable complexity */\n  // validate and log.assert\n  validateProps(aggregationParams, opts) {\n    const {changeFlags, projectPoints, gridTransformMatrix} = aggregationParams;\n    log.assert(\n      changeFlags.dataChanged || changeFlags.viewportChanged || changeFlags.cellSizeChanged\n    );\n\n    // log.assert for required options\n    log.assert(\n      !changeFlags.dataChanged ||\n        (opts.positions &&\n          opts.weights &&\n          (!opts.projectPositions || opts.viewport) &&\n          opts.cellSize)\n    );\n    log.assert(!changeFlags.cellSizeChanged || opts.cellSize);\n\n    // viewport need only when performing screen space aggregation (projectPoints is true)\n    log.assert(!(changeFlags.viewportChanged && projectPoints) || opts.viewport);\n\n    if (projectPoints && gridTransformMatrix) {\n      log.warn('projectPoints is true, gridTransformMatrix is ignored')();\n    }\n  }\n  /* eslint-enable complexity */\n\n  // CPU Aggregation methods\n\n  // aggregated weight value to a cell\n  /* eslint-disable max-depth */\n  calculateAggregationData(opts) {\n    const {weights, results, cellIndex, posIndex} = opts;\n    for (const id in weights) {\n      const {values, size, operation} = weights[id];\n      const {aggregationData} = results[id];\n\n      // Fill RGB with weights\n      for (let sizeIndex = 0; sizeIndex < size; sizeIndex++) {\n        const cellElementIndex = cellIndex + sizeIndex;\n        const weightComponent = values[posIndex * WEIGHT_SIZE + sizeIndex];\n\n        if (aggregationData[cellIndex + 3] === 0) {\n          // if the cell is getting update the first time, set the value directly.\n          aggregationData[cellElementIndex] = weightComponent;\n        } else {\n          switch (operation) {\n            case AGGREGATION_OPERATION.SUM:\n            case AGGREGATION_OPERATION.MEAN:\n              aggregationData[cellElementIndex] += weightComponent;\n              // MEAN value is calculated during 'calculateMeanMaxMinData'\n              break;\n            case AGGREGATION_OPERATION.MIN:\n              aggregationData[cellElementIndex] = Math.min(\n                aggregationData[cellElementIndex],\n                weightComponent\n              );\n              break;\n            case AGGREGATION_OPERATION.MAX:\n              aggregationData[cellElementIndex] = Math.max(\n                aggregationData[cellElementIndex],\n                weightComponent\n              );\n              break;\n            default:\n              // Not a valid operation enum.\n              log.assert(false);\n              break;\n          }\n        }\n      }\n\n      // Track the count per grid-cell\n      aggregationData[cellIndex + 3]++;\n    }\n  }\n\n  /* eslint-disable max-depth, complexity */\n  calculateMeanMaxMinData(opts) {\n    const {validCellIndices, results, weights} = opts;\n\n    // collect max/min values\n    validCellIndices.forEach(cellIndex => {\n      for (const id in results) {\n        const {size, needMin, needMax, operation} = weights[id];\n        const {aggregationData, minData, maxData, maxMinData} = results[id];\n        const calculateMinMax = needMin || needMax;\n        const calculateMean = operation === AGGREGATION_OPERATION.MEAN;\n        const combineMaxMin = needMin && needMax && weights[id].combineMaxMin;\n        const count = aggregationData[cellIndex + ELEMENTCOUNT - 1];\n        for (\n          let sizeIndex = 0;\n          sizeIndex < size && (calculateMinMax || calculateMean);\n          sizeIndex++\n        ) {\n          const cellElementIndex = cellIndex + sizeIndex;\n          let weight = aggregationData[cellElementIndex];\n          if (calculateMean) {\n            aggregationData[cellElementIndex] /= count;\n            weight = aggregationData[cellElementIndex];\n          }\n          if (combineMaxMin) {\n            // use RGB for max values for 3 weights.\n            maxMinData[sizeIndex] = Math.max(maxMinData[sizeIndex], weight);\n          } else {\n            if (needMin) {\n              minData[sizeIndex] = Math.min(minData[sizeIndex], weight);\n            }\n            if (needMax) {\n              maxData[sizeIndex] = Math.max(maxData[sizeIndex], weight);\n            }\n          }\n        }\n        // update total aggregation values.\n        if (combineMaxMin) {\n          // Use Alpha channel to store total min value for weight#0\n          maxMinData[ELEMENTCOUNT - 1] = Math.min(\n            maxMinData[ELEMENTCOUNT - 1],\n            aggregationData[cellIndex + 0]\n          );\n        } else {\n          // Use Alpha channel to store total counts.\n          if (needMin) {\n            minData[ELEMENTCOUNT - 1] += count;\n          }\n          if (needMax) {\n            maxData[ELEMENTCOUNT - 1] += count;\n          }\n        }\n      }\n    });\n  }\n  /* eslint-enable max-depth */\n\n  initCPUResults(opts) {\n    const weights = opts.weights || this.state.weights;\n    const {numCol, numRow} = this.state;\n    const results = {};\n    // setup results object\n    for (const id in weights) {\n      let {aggregationData, minData, maxData, maxMinData} = weights[id];\n      const {needMin, needMax} = weights[id];\n      const combineMaxMin = needMin && needMax && weights[id].combineMaxMin;\n\n      const aggregationSize = numCol * numRow * ELEMENTCOUNT;\n      aggregationData = getFloatArray(aggregationData, aggregationSize);\n      if (combineMaxMin) {\n        maxMinData = getFloatArray(maxMinData, ELEMENTCOUNT);\n        // RGB for max value\n        maxMinData.fill(-Infinity, 0, ELEMENTCOUNT - 1);\n        // Alpha for min value\n        maxMinData[ELEMENTCOUNT - 1] = Infinity;\n      } else {\n        // RGB for min/max values\n        // Alpha for total count\n        if (needMin) {\n          minData = getFloatArray(minData, ELEMENTCOUNT, Infinity);\n          minData[ELEMENTCOUNT - 1] = 0;\n        }\n        if (needMax) {\n          maxData = getFloatArray(maxData, ELEMENTCOUNT, -Infinity);\n          maxData[ELEMENTCOUNT - 1] = 0;\n        }\n      }\n      results[id] = Object.assign({}, weights[id], {\n        aggregationData,\n        minData,\n        maxData,\n        maxMinData\n      });\n    }\n    return results;\n  }\n\n  /* eslint-disable max-statements */\n  runAggregationOnCPU(opts) {\n    const {positions, cellSize, gridTransformMatrix, viewport, projectPoints} = opts;\n    let {weights} = opts;\n    const {numCol, numRow} = this.state;\n    const results = this.initCPUResults(opts);\n    // screen space or world space projection required\n    const gridTransformRequired = this.shouldTransformToGrid(opts);\n    let gridPositions;\n    const pos = [0, 0, 0];\n\n    log.assert(gridTransformRequired || opts.changeFlags.cellSizeChanged);\n\n    let posCount;\n    if (gridTransformRequired) {\n      posCount = positions.length / 2;\n      gridPositions = new Float64Array(positions.length);\n      this.setState({gridPositions});\n    } else {\n      gridPositions = this.state.gridPositions;\n      weights = this.state.weights;\n      posCount = gridPositions.length / 2;\n    }\n\n    const validCellIndices = new Set();\n    for (let posIndex = 0; posIndex < posCount; posIndex++) {\n      let x;\n      let y;\n      if (gridTransformRequired) {\n        pos[0] = positions[posIndex * 2];\n        pos[1] = positions[posIndex * 2 + 1];\n        if (projectPoints) {\n          [x, y] = viewport.project(pos);\n        } else {\n          [x, y] = worldToPixels(pos, gridTransformMatrix);\n        }\n        gridPositions[posIndex * 2] = x;\n        gridPositions[posIndex * 2 + 1] = y;\n      } else {\n        x = gridPositions[posIndex * 2];\n        y = gridPositions[posIndex * 2 + 1];\n      }\n\n      const colId = Math.floor(x / cellSize[0]);\n      const rowId = Math.floor(y / cellSize[1]);\n      if (colId >= 0 && colId < numCol && rowId >= 0 && rowId < numRow) {\n        const cellIndex = (colId + rowId * numCol) * ELEMENTCOUNT;\n        validCellIndices.add(cellIndex);\n        this.calculateAggregationData({weights, results, cellIndex, posIndex});\n      }\n    }\n\n    this.calculateMeanMaxMinData({validCellIndices, results, weights});\n\n    // Update buffer objects.\n    this.updateAggregationBuffers(opts, results);\n    return results;\n  }\n  /* eslint-disable max-statements */\n\n  updateResultBuffer({gl, bufferName, id, data, result}) {\n    const {resources} = this.state;\n    const resourceName = `${id}-${bufferName}`;\n    result[bufferName] = result[bufferName] || resources[resourceName];\n    if (result[bufferName]) {\n      result[bufferName].subData({data});\n    } else {\n      // save resource for garbage collection\n      resources[resourceName] = new Buffer(gl, data);\n      result[bufferName] = resources[resourceName];\n    }\n  }\n\n  updateAggregationBuffers(opts, results) {\n    if (!opts.createBufferObjects) {\n      return;\n    }\n    const weights = opts.weights || this.state.weights;\n    for (const id in results) {\n      const {aggregationData, minData, maxData, maxMinData} = results[id];\n      const {needMin, needMax} = weights[id];\n      const combineMaxMin = needMin && needMax && weights[id].combineMaxMin;\n      this.updateResultBuffer({\n        gl: this.gl,\n        bufferName: 'aggregationBuffer',\n        id,\n        data: aggregationData,\n        result: results[id]\n      });\n      if (combineMaxMin) {\n        this.updateResultBuffer({\n          gl: this.gl,\n          bufferName: 'maxMinBuffer',\n          id,\n          data: maxMinData,\n          result: results[id]\n        });\n      } else {\n        if (needMin) {\n          this.updateResultBuffer({\n            gl: this.gl,\n            bufferName: 'minBuffer',\n            id,\n            data: minData,\n            result: results[id]\n          });\n        }\n        if (needMax) {\n          this.updateResultBuffer({\n            gl: this.gl,\n            bufferName: 'maxBuffer',\n            id,\n            data: maxData,\n            result: results[id]\n          });\n        }\n      }\n    }\n  }\n\n  // GPU Aggregation methods\n\n  getAggregateData(opts) {\n    const results = {};\n    const {\n      textures,\n      framebuffers,\n      maxMinFramebuffers,\n      minFramebuffers,\n      maxFramebuffers,\n      weights\n    } = this.state;\n\n    for (const id in weights) {\n      results[id] = {};\n      const {needMin, needMax, combineMaxMin} = weights[id];\n      results[id].aggregationTexture = textures[id];\n      results[id].aggregationBuffer = readPixelsToBuffer(framebuffers[id], {\n        target: weights[id].aggregationBuffer, // update if a buffer is provided\n        sourceType: GL.FLOAT\n      });\n      if (needMin && needMax && combineMaxMin) {\n        results[id].maxMinBuffer = readPixelsToBuffer(maxMinFramebuffers[id], {\n          target: weights[id].maxMinBuffer, // update if a buffer is provided\n          sourceType: GL.FLOAT\n        });\n      } else {\n        if (needMin) {\n          results[id].minBuffer = readPixelsToBuffer(minFramebuffers[id], {\n            target: weights[id].minBuffer, // update if a buffer is provided\n            sourceType: GL.FLOAT\n          });\n        }\n        if (needMax) {\n          results[id].maxBuffer = readPixelsToBuffer(maxFramebuffers[id], {\n            target: weights[id].maxBuffer, // update if a buffer is provided\n            sourceType: GL.FLOAT\n          });\n        }\n      }\n    }\n    return results;\n  }\n\n  getAggregationModel(fp64 = false) {\n    const {gl, shaderCache} = this;\n    return new Model(gl, {\n      id: 'Gird-Aggregation-Model',\n      vs: fp64 ? AGGREGATE_TO_GRID_VS_FP64 : AGGREGATE_TO_GRID_VS,\n      fs: AGGREGATE_TO_GRID_FS,\n      modules: fp64 ? ['fp64', 'project64'] : ['project32'],\n      shaderCache,\n      vertexCount: 0,\n      drawMode: GL.POINTS\n    });\n  }\n\n  getAllAggregationModel(fp64 = false) {\n    const {gl, shaderCache} = this;\n    return new Model(gl, {\n      id: 'All-Aggregation-Model',\n      vs: AGGREGATE_ALL_VS_FP64,\n      fs: AGGREGATE_ALL_FS,\n      modules: ['fp64'],\n      shaderCache,\n      vertexCount: 1,\n      drawMode: GL.POINTS,\n      isInstanced: true,\n      instanceCount: 0,\n      attributes: {\n        position: [0, 0]\n      }\n    });\n  }\n\n  getMeanTransform(opts) {\n    if (this.meanTransform) {\n      this.meanTransform.update(opts);\n    } else {\n      this.meanTransform = new Transform(\n        this.gl,\n        Object.assign(\n          {},\n          {\n            vs: TRANSFORM_MEAN_VS,\n            _targetTextureVarying: 'meanValues'\n          },\n          opts\n        )\n      );\n    }\n    return this.meanTransform;\n  }\n\n  renderAggregateData(opts) {\n    const {cellSize, viewport, gridTransformMatrix, projectPoints} = opts;\n    const {\n      numCol,\n      numRow,\n      windowSize,\n      maxMinFramebuffers,\n      minFramebuffers,\n      maxFramebuffers,\n      weights\n    } = this.state;\n\n    const uProjectionMatrixFP64 = fp64ifyMatrix4(gridTransformMatrix);\n    const gridSize = [numCol, numRow];\n    const parameters = {\n      blend: true,\n      depthTest: false,\n      blendFunc: [GL.ONE, GL.ONE]\n    };\n    const moduleSettings = {viewport};\n    const uniforms = {\n      windowSize,\n      cellSize,\n      gridSize,\n      uProjectionMatrix: gridTransformMatrix,\n      uProjectionMatrixFP64,\n      projectPoints\n    };\n\n    for (const id in weights) {\n      const {needMin, needMax} = weights[id];\n      const combineMaxMin = needMin && needMax && weights[id].combineMaxMin;\n      this.renderToWeightsTexture({id, parameters, moduleSettings, uniforms, gridSize});\n      if (combineMaxMin) {\n        this.renderToMaxMinTexture({\n          id,\n          parameters: Object.assign({}, parameters, {blendEquation: MAX_MIN_BLEND_EQUATION}),\n          gridSize,\n          minOrMaxFb: maxMinFramebuffers[id],\n          clearParams: {clearColor: [0, 0, 0, MAX_32_BIT_FLOAT]},\n          combineMaxMin\n        });\n      } else {\n        if (needMin) {\n          this.renderToMaxMinTexture({\n            id,\n            parameters: Object.assign({}, parameters, {blendEquation: MIN_BLEND_EQUATION}),\n            gridSize,\n            minOrMaxFb: minFramebuffers[id],\n            clearParams: {clearColor: [MAX_32_BIT_FLOAT, MAX_32_BIT_FLOAT, MAX_32_BIT_FLOAT, 0]},\n            combineMaxMin\n          });\n        }\n        if (needMax) {\n          this.renderToMaxMinTexture({\n            id,\n            parameters: Object.assign({}, parameters, {blendEquation: MAX_BLEND_EQUATION}),\n            gridSize,\n            minOrMaxFb: maxFramebuffers[id],\n            combineMaxMin\n          });\n        }\n      }\n    }\n  }\n\n  // render all aggregated grid-cells to generate Min, Max or MaxMin data texture\n  renderToMaxMinTexture(opts) {\n    const {id, parameters, gridSize, minOrMaxFb, combineMaxMin, clearParams = {}} = opts;\n    const {framebuffers} = this.state;\n    const {gl, allAggregationModel} = this;\n\n    minOrMaxFb.bind();\n    gl.viewport(0, 0, gridSize[0], gridSize[1]);\n    withParameters(gl, clearParams, () => {\n      gl.clear(gl.COLOR_BUFFER_BIT);\n    });\n    allAggregationModel.draw({\n      parameters,\n      uniforms: {\n        uSampler: framebuffers[id].texture,\n        gridSize,\n        combineMaxMin\n      }\n    });\n    minOrMaxFb.unbind();\n  }\n\n  // render all data points to aggregate weights\n  renderToWeightsTexture(opts) {\n    const {id, parameters, moduleSettings, uniforms, gridSize} = opts;\n    const {framebuffers, equations, weightAttributes, weights} = this.state;\n    const {gl, gridAggregationModel} = this;\n    const {operation} = weights[id];\n\n    framebuffers[id].bind();\n    gl.viewport(0, 0, gridSize[0], gridSize[1]);\n    const clearColor =\n      operation === AGGREGATION_OPERATION.MIN\n        ? [MAX_32_BIT_FLOAT, MAX_32_BIT_FLOAT, MAX_32_BIT_FLOAT, 0]\n        : [0, 0, 0, 0];\n    withParameters(gl, {clearColor}, () => {\n      gl.clear(gl.COLOR_BUFFER_BIT);\n    });\n\n    const attributes = {weights: weightAttributes[id]};\n    gridAggregationModel.draw({\n      parameters: Object.assign({}, parameters, {blendEquation: equations[id]}),\n      moduleSettings,\n      uniforms,\n      attributes\n    });\n    framebuffers[id].unbind();\n\n    if (operation === AGGREGATION_OPERATION.MEAN) {\n      const {meanTextures, textures} = this.state;\n      const transformOptions = {\n        _sourceTextures: {aggregationValues: meanTextures[id]}, // contains aggregated data\n        _targetTexture: textures[id], // store mean values,\n        elementCount: textures[id].width * textures[id].height\n      };\n      const meanTransform = this.getMeanTransform(transformOptions);\n      meanTransform.run({\n        parameters: {\n          blend: false,\n          depthTest: false\n        }\n      });\n\n      // update framebuffer with mean results so readPixelsToBuffer returns mean values\n      framebuffers[id].attach({[GL.COLOR_ATTACHMENT0]: textures[id]});\n    }\n  }\n\n  runAggregationOnGPU(opts) {\n    this.updateModels(opts);\n    this.setupFramebuffers(opts);\n    this.renderAggregateData(opts);\n    return this.getAggregateData(opts);\n  }\n\n  // set up framebuffer for each weight\n  /* eslint-disable complexity, max-depth */\n  setupFramebuffers(opts) {\n    const {\n      numCol,\n      numRow,\n      textures,\n      framebuffers,\n      maxMinFramebuffers,\n      minFramebuffers,\n      maxFramebuffers,\n      resources,\n      meanTextures,\n      equations,\n      weights\n    } = this.state;\n    const framebufferSize = {width: numCol, height: numRow};\n    for (const id in weights) {\n      const {needMin, needMax, combineMaxMin, operation} = weights[id];\n      textures[id] =\n        weights[id].aggregationTexture ||\n        textures[id] ||\n        getFloatTexture(this.gl, {id: `${id}-texture`, width: numCol, height: numRow});\n      textures[id].resize(framebufferSize);\n      let texture = textures[id];\n      if (operation === AGGREGATION_OPERATION.MEAN) {\n        // For MEAN, we first aggregatet into a temp texture\n        meanTextures[id] =\n          meanTextures[id] ||\n          getFloatTexture(this.gl, {id: `${id}-mean-texture`, width: numCol, height: numRow});\n        meanTextures[id].resize(framebufferSize);\n        texture = meanTextures[id];\n      }\n      if (framebuffers[id]) {\n        framebuffers[id].attach({[GL.COLOR_ATTACHMENT0]: texture});\n      } else {\n        framebuffers[id] = getFramebuffer(this.gl, {\n          id: `${id}-fb`,\n          width: numCol,\n          height: numRow,\n          texture\n        });\n      }\n      framebuffers[id].resize(framebufferSize);\n      equations[id] = EQUATION_MAP[operation];\n      // For min/max framebuffers will use default size 1X1\n      if (needMin || needMax) {\n        if (needMin && needMax && combineMaxMin) {\n          if (!maxMinFramebuffers[id]) {\n            resources[`${id}-maxMin`] = getFloatTexture(this.gl, {id: `${id}-maxMinTex`});\n            maxMinFramebuffers[id] = getFramebuffer(this.gl, {\n              id: `${id}-maxMinFb`,\n              texture: resources[`${id}-maxMin`]\n            });\n          }\n        } else {\n          if (needMin) {\n            if (!minFramebuffers[id]) {\n              resources[`${id}-min`] = getFloatTexture(this.gl, {id: `${id}-minTex`});\n              minFramebuffers[id] = getFramebuffer(this.gl, {\n                id: `${id}-minFb`,\n                texture: resources[`${id}-min`]\n              });\n            }\n          }\n          if (needMax) {\n            if (!maxFramebuffers[id]) {\n              resources[`${id}-max`] = getFloatTexture(this.gl, {id: `${id}-maxTex`});\n              maxFramebuffers[id] = getFramebuffer(this.gl, {\n                id: `${id}-maxFb`,\n                texture: resources[`${id}-max`]\n              });\n            }\n          }\n        }\n      }\n    }\n  }\n  /* eslint-enable complexity, max-depth */\n\n  setupModels(fp64 = false) {\n    if (this.gridAggregationModel) {\n      this.gridAggregationModel.delete();\n    }\n    this.gridAggregationModel = this.getAggregationModel(fp64);\n    if (this.allAggregationModel) {\n      this.allAggregationModel.delete();\n    }\n    this.allAggregationModel = this.getAllAggregationModel(fp64);\n  }\n\n  // set up buffers for all weights\n  setupWeightAttributes(opts) {\n    const {weightAttributes, vertexCount, weights, resources} = this.state;\n    for (const id in weights) {\n      const {values} = weights[id];\n      // values can be Array, Float32Array or Buffer\n      if (Array.isArray(values) || values.constructor === Float32Array) {\n        log.assert(values.length / 3 === vertexCount);\n        const typedArray = Array.isArray(values) ? new Float32Array(values) : values;\n        if (weightAttributes[id] instanceof Buffer) {\n          weightAttributes[id].setData(typedArray);\n        } else {\n          resources[`${id}-buffer`] = new Buffer(this.gl, typedArray);\n          weightAttributes[id] = resources[`${id}-buffer`];\n        }\n      } else {\n        // log.assert((values instanceof Attribute) || (values instanceof Buffer));\n        log.assert(values instanceof Buffer);\n        weightAttributes[id] = values;\n      }\n    }\n  }\n\n  /* eslint-disable max-statements */\n  updateModels(opts) {\n    const {gl} = this;\n    const {positions, positions64xyLow, changeFlags} = opts;\n    const {numCol, numRow} = this.state;\n\n    let {positionsBuffer, positions64xyLowBuffer} = this.state;\n\n    const aggregationModelAttributes = {};\n\n    let createPos64xyLow = false;\n    if (opts.fp64 !== this.state.fp64) {\n      this.setupModels(opts.fp64);\n      this.setState({fp64: opts.fp64});\n      if (opts.fp64) {\n        createPos64xyLow = true;\n      }\n    }\n\n    if (changeFlags.dataChanged || !positionsBuffer) {\n      if (positionsBuffer) {\n        positionsBuffer.delete();\n      }\n      const vertexCount = positions.length / 2;\n      // positionsBuffer = new Buffer(gl, {size: 2, data: new Float32Array(positions)});\n      positionsBuffer = new Buffer(gl, new Float32Array(positions));\n      createPos64xyLow = opts.fp64;\n      Object.assign(aggregationModelAttributes, {\n        positions: positionsBuffer\n      });\n      this.setState({positionsBuffer, vertexCount});\n\n      this.setupWeightAttributes(opts);\n      this.gridAggregationModel.setVertexCount(vertexCount);\n    }\n\n    if (createPos64xyLow) {\n      log.assert(positions64xyLow);\n      if (positions64xyLowBuffer) {\n        positions64xyLowBuffer.delete();\n      }\n      positions64xyLowBuffer = new Buffer(gl, {size: 2, data: new Float32Array(positions64xyLow)});\n      Object.assign(aggregationModelAttributes, {\n        positions64xyLow: positions64xyLowBuffer\n      });\n      this.setState({positions64xyLowBuffer});\n    }\n\n    this.gridAggregationModel.setAttributes(aggregationModelAttributes);\n\n    if (changeFlags.cellSizeChanged || changeFlags.viewportChanged) {\n      this.allAggregationModel.setInstanceCount(numCol * numRow);\n    }\n  }\n  /* eslint-enable max-statements */\n}\n"],"file":"gpu-grid-aggregator.js"}