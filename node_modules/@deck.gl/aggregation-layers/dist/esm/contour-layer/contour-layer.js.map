{"version":3,"sources":["../../../src/contour-layer/contour-layer.js"],"names":["equals","CompositeLayer","LineLayer","SolidPolygonLayer","generateContours","GPUGridAggregator","pointToDensityGridData","DEFAULT_COLOR","DEFAULT_STROKE_WIDTH","DEFAULT_THRESHOLD","defaultProps","cellSize","type","min","max","value","getPosition","x","position","getWeight","contours","threshold","fp64","zOffset","ContourLayer","gl","context","options","id","shaderCache","state","contourData","gridAggregator","colorTrigger","strokeWidthTrigger","oldProps","props","changeFlags","dataChanged","contoursChanged","aggregationFlags","_getAggregationFlags","setState","countsData","_aggregateData","_shouldRebuildContours","_updateThresholdData","_generateContours","_updateSubLayerTriggers","delete","contourSegments","contourPolygons","hasIsolines","length","hasIsobands","lineLayer","_getLineLayerProps","solidPolygonLayer","_getSolidPolygonLayerProps","data","cellSizeMeters","gpuAggregation","coordinateSystem","gpuGridAggregator","viewport","boundingBox","countsBuffer","gridSize","gridOrigin","thresholdData","getData","getCellData","cellWeights","updateTriggersChanged","all","Object","assign","cellSizeChanged","getSubLayerProps","getSourcePosition","d","start","getTargetPosition","end","getColor","_onGetSublayerColor","bind","getWidth","_onGetSublayerStrokeWidth","widthUnits","updateTriggers","getPolygon","vertices","getFillColor","element","color","forEach","segment","strokeWidth","some","contour","oldThresholds","map","thresholds","_","i","index","zIndex","layerName"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2018 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {equals} from 'math.gl';\nimport {CompositeLayer} from '@deck.gl/core';\nimport {LineLayer, SolidPolygonLayer} from '@deck.gl/layers';\nimport {generateContours} from './contour-utils';\n\nimport GPUGridAggregator from '../utils/gpu-grid-aggregation/gpu-grid-aggregator';\nimport {pointToDensityGridData} from '../utils/gpu-grid-aggregation/grid-aggregation-utils';\n\nconst DEFAULT_COLOR = [255, 255, 255, 255];\nconst DEFAULT_STROKE_WIDTH = 1;\nconst DEFAULT_THRESHOLD = 1;\n\nconst defaultProps = {\n  // grid aggregation\n  cellSize: {type: 'number', min: 1, max: 1000, value: 1000},\n  getPosition: {type: 'accessor', value: x => x.position},\n  getWeight: {type: 'accessor', value: x => 1},\n\n  // contour lines\n  contours: [{threshold: DEFAULT_THRESHOLD}],\n\n  fp64: false,\n  zOffset: 0.005\n};\n\nexport default class ContourLayer extends CompositeLayer {\n  initializeState() {\n    const {gl} = this.context;\n    const options = {\n      id: `${this.id}-gpu-aggregator`,\n      shaderCache: this.context.shaderCache\n    };\n    this.state = {\n      contourData: {},\n      gridAggregator: new GPUGridAggregator(gl, options),\n      colorTrigger: 0,\n      strokeWidthTrigger: 0\n    };\n  }\n\n  updateState({oldProps, props, changeFlags}) {\n    let dataChanged = false;\n    let contoursChanged = false;\n    const aggregationFlags = this._getAggregationFlags({oldProps, props, changeFlags});\n    if (aggregationFlags) {\n      dataChanged = true;\n      // Clear countsData cache\n      this.setState({countsData: null});\n      this._aggregateData(aggregationFlags);\n    }\n\n    if (this._shouldRebuildContours({oldProps, props})) {\n      contoursChanged = true;\n      this._updateThresholdData(props);\n    }\n\n    if (dataChanged || contoursChanged) {\n      this._generateContours();\n    } else {\n      // data for sublayers not changed check if color or strokeWidth need to be updated\n      this._updateSubLayerTriggers(oldProps, props);\n    }\n  }\n\n  finalizeState() {\n    super.finalizeState();\n    this.state.gridAggregator.delete();\n  }\n\n  renderLayers() {\n    const {contourSegments, contourPolygons} = this.state.contourData;\n    const hasIsolines = contourSegments && contourSegments.length > 0;\n    const hasIsobands = contourPolygons && contourPolygons.length > 0;\n\n    const lineLayer = hasIsolines && new LineLayer(this._getLineLayerProps());\n    const solidPolygonLayer =\n      hasIsobands && new SolidPolygonLayer(this._getSolidPolygonLayerProps());\n    return [lineLayer, solidPolygonLayer];\n  }\n\n  // Private\n\n  _aggregateData(aggregationFlags) {\n    const {\n      data,\n      cellSize: cellSizeMeters,\n      getPosition,\n      getWeight,\n      gpuAggregation,\n      fp64,\n      coordinateSystem\n    } = this.props;\n    const {\n      countsData,\n      countsBuffer,\n      gridSize,\n      gridOrigin,\n      cellSize,\n      boundingBox\n    } = pointToDensityGridData({\n      data,\n      cellSizeMeters,\n      getPosition,\n      getWeight,\n      gpuAggregation,\n      gpuGridAggregator: this.state.gridAggregator,\n      fp64,\n      coordinateSystem,\n      viewport: this.context.viewport,\n      boundingBox: this.state.boundingBox, // avoid parsing data when it is not changed.\n      aggregationFlags\n    });\n\n    this.setState({countsData, countsBuffer, gridSize, gridOrigin, cellSize, boundingBox});\n  }\n\n  _generateContours() {\n    const {gridSize, gridOrigin, cellSize, thresholdData} = this.state;\n    let {countsData} = this.state;\n    if (!countsData) {\n      const {countsBuffer} = this.state;\n      countsData = countsBuffer.getData();\n      this.setState({countsData});\n    }\n\n    const {cellWeights} = GPUGridAggregator.getCellData({countsData});\n    // const thresholds = this.props.contours.map(x => x.threshold);\n    const contourData = generateContours({\n      thresholdData,\n      cellWeights,\n      gridSize,\n      gridOrigin,\n      cellSize\n    });\n\n    // contourData contains both iso-lines and iso-bands if requested.\n    this.setState({contourData});\n  }\n\n  _getAggregationFlags({oldProps, props, changeFlags}) {\n    let aggregationFlags = null;\n    if (\n      changeFlags.dataChanged ||\n      oldProps.gpuAggregation !== props.gpuAggregation ||\n      (changeFlags.updateTriggersChanged &&\n        (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getPosition))\n    ) {\n      aggregationFlags = Object.assign({}, aggregationFlags, {dataChanged: true});\n    }\n    if (oldProps.cellSize !== props.cellSize) {\n      aggregationFlags = Object.assign({}, aggregationFlags, {cellSizeChanged: true});\n    }\n    return aggregationFlags;\n  }\n\n  _getLineLayerProps() {\n    const {fp64} = this.props;\n    const {colorTrigger, strokeWidthTrigger} = this.state;\n\n    return this.getSubLayerProps({\n      id: 'contour-line-layer',\n      data: this.state.contourData.contourSegments,\n      fp64,\n      getSourcePosition: d => d.start,\n      getTargetPosition: d => d.end,\n      getColor: this._onGetSublayerColor.bind(this),\n      getWidth: this._onGetSublayerStrokeWidth.bind(this),\n      widthUnits: 'pixels',\n      updateTriggers: {\n        getColor: colorTrigger,\n        getWidth: strokeWidthTrigger\n      }\n    });\n  }\n\n  _getSolidPolygonLayerProps() {\n    const {fp64} = this.props;\n    const {colorTrigger} = this.state;\n\n    return this.getSubLayerProps({\n      id: 'contour-solid-polygon-layer',\n      data: this.state.contourData.contourPolygons,\n      fp64,\n      getPolygon: d => d.vertices,\n      getFillColor: this._onGetSublayerColor.bind(this),\n      updateTriggers: {\n        getFillColor: colorTrigger\n      }\n    });\n  }\n\n  _onGetSublayerColor(element) {\n    // element is either a line segment or polygon\n    const {contours} = this.props;\n    let color = DEFAULT_COLOR;\n    contours.forEach(data => {\n      if (equals(data.threshold, element.threshold)) {\n        color = data.color || DEFAULT_COLOR;\n      }\n    });\n    return color;\n  }\n\n  _onGetSublayerStrokeWidth(segment) {\n    const {contours} = this.props;\n    let strokeWidth = DEFAULT_STROKE_WIDTH;\n    // Linearly searches the contours, but there should only be few contours\n    contours.some(contour => {\n      if (contour.threshold === segment.threshold) {\n        strokeWidth = contour.strokeWidth || DEFAULT_STROKE_WIDTH;\n        return true;\n      }\n      return false;\n    });\n    return strokeWidth;\n  }\n\n  _shouldRebuildContours({oldProps, props}) {\n    if (\n      !oldProps.contours ||\n      !oldProps.zOffset ||\n      oldProps.contours.length !== props.contours.length ||\n      oldProps.zOffset !== props.zOffset\n    ) {\n      return true;\n    }\n    const oldThresholds = oldProps.contours.map(x => x.threshold);\n    const thresholds = props.contours.map(x => x.threshold);\n\n    return thresholds.some((_, i) => !equals(thresholds[i], oldThresholds[i]));\n  }\n\n  _updateSubLayerTriggers(oldProps, props) {\n    if (oldProps && oldProps.contours && props && props.contours) {\n      if (props.contours.some((contour, i) => contour.color !== oldProps.contours[i].color)) {\n        this.state.colorTrigger++;\n      }\n      if (\n        props.contours.some(\n          (contour, i) => contour.strokeWidth !== oldProps.contours[i].strokeWidth\n        )\n      ) {\n        this.state.strokeWidthTrigger++;\n      }\n    }\n  }\n\n  _updateThresholdData(props) {\n    const thresholdData = props.contours.map((x, index) => {\n      return {\n        threshold: x.threshold,\n        zIndex: x.zIndex || index,\n        zOffset: props.zOffset\n      };\n    });\n    this.setState({thresholdData});\n  }\n}\n\nContourLayer.layerName = 'ContourLayer';\nContourLayer.defaultProps = defaultProps;\n"],"file":"contour-layer.js"}