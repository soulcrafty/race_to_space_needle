{"version":3,"sources":["../../../src/screen-grid-layer/screen-grid-layer.js"],"names":["Layer","WebMercatorViewport","createIterable","log","experimental","count","defaultColorRange","GPUGridAggregator","AGGREGATION_OPERATION","Model","Geometry","Buffer","isWebGL2","vs","vs_WebGL1","fs","fs_WebGL1","DEFAULT_MINCOLOR","DEFAULT_MAXCOLOR","AGGREGATION_DATA_UBO_INDEX","COLOR_PROPS","defaultProps","cellSizePixels","value","min","cellMarginPixels","max","colorDomain","colorRange","getPosition","type","d","position","getWeight","gpuAggregation","aggregation","ScreenGridLayer","shaders","context","gl","modules","attributeManager","getAttributeManager","addInstanced","instancePositions","size","update","calculateInstancePositions","instanceCounts","transition","accessor","calculateInstanceCounts","noAlloc","options","id","shaderCache","maxBuffer","_getMaxCountBuffer","weights","color","operation","SUM","needMax","setState","model","_getModel","gpuGridAggregator","aggregationResults","_setupUniformBuffer","changeFlags","somethingChanged","opts","_updateUniforms","dataChanged","_processData","_getAggregationChangeFlags","_updateAggregation","state","aggregationBuffer","delete","uniforms","props","parameters","minColor","maxColor","cellScale","shouldUseMinMax","maxWeight","layerUniforms","bind","target","Object","assign","draw","depthTest","depthMask","unbind","attribute","numInstances","viewport","width","height","numCol","i","x","y","Math","floor","buffer","info","mode","index","aggregationData","getData","maxData","object","getAggregationData","pixelIndex","oldProps","cellSizeChanged","viewportChanged","getShaders","geometry","drawMode","attributes","positions","Float32Array","isInstanced","byteLength","data","pointCount","Float64Array","colorWeights","iterable","objectInfo","weight","Array","isArray","values","programHandle","program","handle","uniformBlockIndex","getUniformBlockIndex","uniformBlockBinding","deprecated","_updateGridParams","invalidateAll","toUpperCase","projectPoints","gridTransformMatrix","pixelProjectionMatrix","results","run","cellSize","useGPU","Number","isFinite","invalidate","newState","some","key","_shouldUseMinMax","colorRangeUniform","forEach","push","margin","ceil","numRow","dataBytes","divisor","layerName"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {Layer, WebMercatorViewport, createIterable, log, experimental} from '@deck.gl/core';\nconst {count} = experimental;\nimport {defaultColorRange} from '../utils/color-utils';\nimport GPUGridAggregator from '../utils/gpu-grid-aggregation/gpu-grid-aggregator';\nimport {AGGREGATION_OPERATION} from '../utils/gpu-grid-aggregation/gpu-grid-aggregator-constants';\n\nimport GL from '@luma.gl/constants';\nimport {Model, Geometry, Buffer, isWebGL2} from '@luma.gl/core';\n\nimport vs from './screen-grid-layer-vertex.glsl';\nimport vs_WebGL1 from './screen-grid-layer-vertex-webgl1.glsl';\nimport fs from './screen-grid-layer-fragment.glsl';\nimport fs_WebGL1 from './screen-grid-layer-fragment-webgl1.glsl';\n\nconst DEFAULT_MINCOLOR = [0, 0, 0, 0];\nconst DEFAULT_MAXCOLOR = [0, 255, 0, 255];\nconst AGGREGATION_DATA_UBO_INDEX = 0;\nconst COLOR_PROPS = [`minColor`, `maxColor`, `colorRange`, `colorDomain`];\n\nconst defaultProps = {\n  cellSizePixels: {value: 100, min: 1},\n  cellMarginPixels: {value: 2, min: 0, max: 5},\n\n  colorDomain: null,\n  colorRange: defaultColorRange,\n\n  getPosition: {type: 'accessor', value: d => d.position},\n  getWeight: {type: 'accessor', value: d => [1, 0, 0]},\n\n  gpuAggregation: true,\n  aggregation: 'SUM'\n};\n\nexport default class ScreenGridLayer extends Layer {\n  getShaders() {\n    const shaders = isWebGL2(this.context.gl) ? {vs, fs} : {vs: vs_WebGL1, fs: fs_WebGL1};\n    shaders.modules = ['picking'];\n    return shaders;\n  }\n\n  initializeState() {\n    const attributeManager = this.getAttributeManager();\n    const {gl} = this.context;\n\n    /* eslint-disable max-len */\n    attributeManager.addInstanced({\n      instancePositions: {size: 3, update: this.calculateInstancePositions},\n      instanceCounts: {\n        size: 4,\n        transition: true,\n        accessor: ['getPosition', 'getWeight'],\n        update: this.calculateInstanceCounts,\n        noAlloc: true\n      }\n    });\n    /* eslint-disable max-len */\n\n    const options = {\n      id: `${this.id}-aggregator`,\n      shaderCache: this.context.shaderCache\n    };\n    const maxBuffer = this._getMaxCountBuffer(gl);\n    const weights = {\n      color: {\n        size: 1,\n        operation: AGGREGATION_OPERATION.SUM,\n        needMax: true,\n        maxBuffer\n      }\n    };\n    this.setState({\n      model: this._getModel(gl),\n      gpuGridAggregator: new GPUGridAggregator(gl, options),\n      maxBuffer,\n      weights,\n      aggregationResults: null\n    });\n\n    this._setupUniformBuffer();\n  }\n\n  shouldUpdateState({changeFlags}) {\n    return changeFlags.somethingChanged;\n  }\n\n  updateState(opts) {\n    super.updateState(opts);\n\n    this._updateUniforms(opts);\n\n    if (opts.changeFlags.dataChanged) {\n      this._processData();\n    }\n\n    const changeFlags = this._getAggregationChangeFlags(opts);\n\n    if (changeFlags) {\n      this._updateAggregation(changeFlags);\n    }\n  }\n\n  finalizeState() {\n    super.finalizeState();\n\n    const {aggregationBuffer, maxBuffer, gpuGridAggregator} = this.state;\n    gpuGridAggregator.delete();\n    if (aggregationBuffer) {\n      aggregationBuffer.delete();\n    }\n    if (maxBuffer) {\n      maxBuffer.delete();\n    }\n  }\n\n  draw({uniforms}) {\n    const {gl} = this.context;\n    const {parameters = {}} = this.props;\n    const minColor = this.props.minColor || DEFAULT_MINCOLOR;\n    const maxColor = this.props.maxColor || DEFAULT_MAXCOLOR;\n\n    // If colorDomain not specified we use default domain [1, maxCount]\n    // maxCount value will be deduced from aggregated buffer in the vertex shader.\n    const colorDomain = this.props.colorDomain || [1, 0];\n    const {model, maxBuffer, cellScale, shouldUseMinMax, colorRange, maxWeight} = this.state;\n    const layerUniforms = {\n      minColor,\n      maxColor,\n      cellScale,\n      colorRange,\n      colorDomain,\n      shouldUseMinMax\n    };\n\n    if (isWebGL2(gl)) {\n      maxBuffer.bind({target: GL.UNIFORM_BUFFER});\n    } else {\n      layerUniforms.maxWeight = maxWeight;\n    }\n    uniforms = Object.assign(layerUniforms, uniforms);\n    model.draw({\n      uniforms,\n      parameters: Object.assign(\n        {\n          depthTest: false,\n          depthMask: false\n        },\n        parameters\n      )\n    });\n    if (isWebGL2(gl)) {\n      maxBuffer.unbind();\n    }\n  }\n\n  calculateInstancePositions(attribute, {numInstances}) {\n    const {width, height} = this.context.viewport;\n    const {cellSizePixels} = this.props;\n    const {numCol} = this.state;\n    const {value, size} = attribute;\n\n    for (let i = 0; i < numInstances; i++) {\n      const x = i % numCol;\n      const y = Math.floor(i / numCol);\n      value[i * size + 0] = ((x * cellSizePixels) / width) * 2 - 1;\n      value[i * size + 1] = 1 - ((y * cellSizePixels) / height) * 2;\n      value[i * size + 2] = 0;\n    }\n  }\n\n  calculateInstanceCounts(attribute, {numInstances}) {\n    const {aggregationBuffer} = this.state;\n    attribute.update({\n      buffer: aggregationBuffer\n    });\n  }\n\n  getPickingInfo({info, mode}) {\n    const {index} = info;\n    if (index >= 0) {\n      const {aggregationResults} = this.state;\n\n      // Cache aggregationResults to avoid multiple buffer reads.\n      aggregationResults.aggregationData =\n        aggregationResults.aggregationData || this.state.aggregationBuffer.getData();\n      aggregationResults.maxData = aggregationResults.maxData || this.state.maxBuffer.getData();\n\n      const {aggregationData, maxData} = aggregationResults;\n      // Each instance (one cell) is aggregated into single pixel,\n      // Get current instance's aggregation details.\n      info.object = GPUGridAggregator.getAggregationData({\n        aggregationData,\n        maxData,\n        pixelIndex: index\n      });\n    }\n\n    return info;\n  }\n\n  // HELPER Methods\n\n  _getAggregationChangeFlags({oldProps, props, changeFlags}) {\n    const cellSizeChanged =\n      props.cellSizePixels !== oldProps.cellSizePixels ||\n      props.cellMarginPixels !== oldProps.cellMarginPixels;\n    const dataChanged = changeFlags.dataChanged || props.aggregation !== oldProps.aggregation;\n    const viewportChanged = changeFlags.viewportChanged;\n\n    if (cellSizeChanged || dataChanged || viewportChanged) {\n      return {cellSizeChanged, dataChanged, viewportChanged};\n    }\n\n    return null;\n  }\n\n  _getModel(gl) {\n    return new Model(\n      gl,\n      Object.assign({}, this.getShaders(), {\n        id: this.props.id,\n        geometry: new Geometry({\n          drawMode: GL.TRIANGLE_FAN,\n          attributes: {\n            positions: new Float32Array([0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0])\n          }\n        }),\n        isInstanced: true,\n        shaderCache: this.context.shaderCache\n      })\n    );\n  }\n\n  // Creates and returns a Uniform Buffer object to hold maxCount value.\n  _getMaxCountBuffer(gl) {\n    return new Buffer(gl, {\n      byteLength: 4 * 4, // Four floats\n      index: AGGREGATION_DATA_UBO_INDEX,\n      accessor: {\n        size: 4\n      }\n    });\n  }\n\n  // Process 'data' and build positions and weights Arrays.\n  _processData() {\n    const {data, getPosition, getWeight} = this.props;\n    const pointCount = count(data);\n    const positions = new Float64Array(pointCount * 2);\n    const colorWeights = new Float32Array(pointCount * 3);\n    const {weights} = this.state;\n\n    const {iterable, objectInfo} = createIterable(data);\n    for (const object of iterable) {\n      objectInfo.index++;\n      const position = getPosition(object, objectInfo);\n      const weight = getWeight(object, objectInfo);\n      const {index} = objectInfo;\n\n      positions[index * 2] = position[0];\n      positions[index * 2 + 1] = position[1];\n\n      if (Array.isArray(weight)) {\n        colorWeights[index * 3] = weight[0];\n        colorWeights[index * 3 + 1] = weight[1];\n        colorWeights[index * 3 + 2] = weight[2];\n      } else {\n        // backward compitability\n        colorWeights[index * 3] = weight;\n      }\n    }\n    weights.color.values = colorWeights;\n    this.setState({positions});\n  }\n\n  // Set a binding point for the aggregation uniform block index\n  _setupUniformBuffer() {\n    const gl = this.context.gl;\n    // For WebGL1, uniform buffer is not used.\n    if (!isWebGL2(gl)) {\n      return;\n    }\n    const programHandle = this.state.model.program.handle;\n\n    // TODO: Replace with luma.gl api when ready.\n    const uniformBlockIndex = gl.getUniformBlockIndex(programHandle, 'AggregationData');\n    gl.uniformBlockBinding(programHandle, uniformBlockIndex, AGGREGATION_DATA_UBO_INDEX);\n  }\n\n  _shouldUseMinMax() {\n    const {minColor, maxColor, colorDomain, colorRange} = this.props;\n    if (minColor || maxColor) {\n      log.deprecated('ScreenGridLayer props: minColor and maxColor', 'colorRange, colorDomain')();\n      return true;\n    }\n    // minColor and maxColor not supplied, check if colorRange or colorDomain supplied.\n    // NOTE: colorDomain and colorRange are experimental features, use them only when supplied.\n    if (colorDomain || colorRange) {\n      return false;\n    }\n    // None specified, use default minColor and maxColor\n    return true;\n  }\n\n  _updateAggregation(changeFlags) {\n    const attributeManager = this.getAttributeManager();\n    if (changeFlags.cellSizeChanged || changeFlags.viewportChanged) {\n      this._updateGridParams();\n      attributeManager.invalidateAll();\n    }\n    const {cellSizePixels, gpuAggregation} = this.props;\n\n    const {positions, weights} = this.state;\n    const {viewport} = this.context;\n\n    weights.color.operation =\n      AGGREGATION_OPERATION[this.props.aggregation.toUpperCase()] || AGGREGATION_OPERATION.SUM;\n\n    let projectPoints = false;\n    let gridTransformMatrix = null;\n\n    if (this.context.viewport instanceof WebMercatorViewport) {\n      // project points from world space (lng/lat) to viewport (screen) space.\n      projectPoints = true;\n    } else {\n      projectPoints = false;\n      // Use pixelProjectionMatrix to transform points to viewport (screen) space.\n      gridTransformMatrix = viewport.pixelProjectionMatrix;\n    }\n    const results = this.state.gpuGridAggregator.run({\n      positions,\n      weights,\n      cellSize: [cellSizePixels, cellSizePixels],\n      viewport,\n      changeFlags,\n      useGPU: gpuAggregation,\n      projectPoints,\n      gridTransformMatrix\n    });\n\n    const maxWeight =\n      results.color.maxData && Number.isFinite(results.color.maxData[0])\n        ? results.color.maxData[0]\n        : 0;\n    // Under WebGL1 results are available in JS Arrays\n    // For WebGL2, data is in Buffer objects and will be read on demand (like picking)\n    const aggregationResults = {\n      aggregationData: results.color.aggregationData,\n      maxData: results.color.maxData\n    };\n    this.setState({\n      aggregationResults,\n      maxWeight // uniform to use under WebGL1\n    });\n\n    attributeManager.invalidate('instanceCounts');\n  }\n\n  _updateUniforms({oldProps, props, changeFlags}) {\n    const newState = {};\n    if (COLOR_PROPS.some(key => oldProps[key] !== props[key])) {\n      newState.shouldUseMinMax = this._shouldUseMinMax();\n    }\n\n    if (oldProps.colorRange !== props.colorRange) {\n      const colorRangeUniform = [];\n      props.colorRange.forEach(color => {\n        colorRangeUniform.push(color[0], color[1], color[2], color[3] || 255);\n      });\n      newState.colorRange = colorRangeUniform;\n    }\n\n    if (\n      oldProps.cellMarginPixels !== props.cellMarginPixels ||\n      oldProps.cellSizePixels !== props.cellSizePixels ||\n      changeFlags.viewportChanged\n    ) {\n      const {width, height} = this.context.viewport;\n      const {cellSizePixels, cellMarginPixels} = this.props;\n      const margin = cellSizePixels > cellMarginPixels ? cellMarginPixels : 0;\n\n      newState.cellScale = new Float32Array([\n        ((cellSizePixels - margin) / width) * 2,\n        (-(cellSizePixels - margin) / height) * 2,\n        1\n      ]);\n    }\n    this.setState(newState);\n  }\n\n  _updateGridParams() {\n    const {width, height} = this.context.viewport;\n    const {cellSizePixels} = this.props;\n    const {gl} = this.context;\n\n    const numCol = Math.ceil(width / cellSizePixels);\n    const numRow = Math.ceil(height / cellSizePixels);\n    const numInstances = numCol * numRow;\n    const dataBytes = numInstances * 4 * 4;\n    let aggregationBuffer = this.state.aggregationBuffer;\n    if (aggregationBuffer) {\n      aggregationBuffer.delete();\n    }\n\n    aggregationBuffer = new Buffer(gl, {\n      byteLength: dataBytes,\n      accessor: {\n        size: 4,\n        type: GL.FLOAT,\n        divisor: 1\n      }\n    });\n    this.state.weights.color.aggregationBuffer = aggregationBuffer;\n    this.setState({\n      numCol,\n      numRow,\n      numInstances,\n      aggregationBuffer\n    });\n  }\n}\n\nScreenGridLayer.layerName = 'ScreenGridLayer';\nScreenGridLayer.defaultProps = defaultProps;\n"],"file":"screen-grid-layer.js"}