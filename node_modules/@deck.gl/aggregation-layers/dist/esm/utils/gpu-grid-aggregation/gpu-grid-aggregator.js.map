{"version":3,"sources":["../../../../src/utils/gpu-grid-aggregation/gpu-grid-aggregator.js"],"names":["Buffer","Model","Transform","FEATURES","hasFeatures","isWebGL2","readPixelsToBuffer","fp64","fp64Utils","withParameters","log","worldToPixels","fp64ifyMatrix4","AGGREGATION_OPERATION","DEFAULT_CHANGE_FLAGS","DEFAULT_RUN_PARAMS","MAX_32_BIT_FLOAT","MIN_BLEND_EQUATION","MAX_BLEND_EQUATION","MAX_MIN_BLEND_EQUATION","EQUATION_MAP","ELEMENTCOUNT","DEFAULT_WEIGHT_PARAMS","IDENTITY_MATRIX","PIXEL_SIZE","WEIGHT_SIZE","AGGREGATE_TO_GRID_VS","AGGREGATE_TO_GRID_VS_FP64","AGGREGATE_TO_GRID_FS","AGGREGATE_ALL_VS_FP64","AGGREGATE_ALL_FS","TRANSFORM_MEAN_VS","getFloatTexture","getFramebuffer","getFloatArray","GPUGridAggregator","aggregationData","maxData","pixelIndex","assert","length","index","cellCount","cellWeight","totalCount","maxCellWieght","countsData","size","numCells","cellWeights","Float32Array","cellCounts","Uint32Array","i","sizeIndex","gl","opts","id","shaderCache","state","weights","gridPositions","positionsBuffer","positions64xyLowBuffer","vertexCount","useGPU","numCol","numRow","windowSize","cellSize","weightAttributes","textures","meanTextures","buffers","framebuffers","maxMinFramebuffers","minFramebuffers","maxFramebuffers","equations","resources","_hasGPUSupport","BLEND_EQUATION_MINMAX","COLOR_ATTACHMENT_RGBA32F","TEXTURE_FLOAT","gridAggregationModel","allAggregationModel","meanTransform","position64Buffer","delete","deleteResources","aggregationParams","getAggregationParams","updateGridSize","runAggregationOnGPU","warn","runAggregationOnCPU","Array","isArray","forEach","obj","name","Object","assign","gridTransformMatrix","viewport","projectPoints","changeFlags","cellSizeChanged","setState","validateProps","viewportMatrix","normalizeWeightParams","result","updateObject","dataChanged","viewportChanged","width","height","Math","ceil","positions","projectPositions","results","cellIndex","posIndex","values","operation","cellElementIndex","weightComponent","SUM","MEAN","MIN","min","MAX","max","validCellIndices","needMin","needMax","minData","maxMinData","calculateMinMax","calculateMean","combineMaxMin","count","weight","aggregationSize","fill","Infinity","initCPUResults","gridTransformRequired","shouldTransformToGrid","pos","posCount","Float64Array","Set","x","y","project","colId","floor","rowId","add","calculateAggregationData","calculateMeanMaxMinData","updateAggregationBuffers","bufferName","data","resourceName","subData","createBufferObjects","updateResultBuffer","aggregationTexture","aggregationBuffer","target","sourceType","maxMinBuffer","minBuffer","maxBuffer","vs","fs","modules","drawMode","isInstanced","instanceCount","attributes","position","update","_targetTextureVarying","uProjectionMatrixFP64","gridSize","parameters","blend","depthTest","blendFunc","moduleSettings","uniforms","uProjectionMatrix","renderToWeightsTexture","renderToMaxMinTexture","blendEquation","minOrMaxFb","clearParams","clearColor","bind","clear","draw","uSampler","texture","unbind","transformOptions","_sourceTextures","aggregationValues","_targetTexture","elementCount","getMeanTransform","run","attach","updateModels","setupFramebuffers","renderAggregateData","getAggregateData","framebufferSize","resize","getAggregationModel","getAllAggregationModel","constructor","typedArray","setData","positions64xyLow","aggregationModelAttributes","createPos64xyLow","setupModels","setupWeightAttributes","setVertexCount","setAttributes","setInstanceCount"],"mappings":"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","sourcesContent":["import GL from '@luma.gl/constants';\nimport {\n  Buffer,\n  Model,\n  Transform,\n  FEATURES,\n  hasFeatures,\n  isWebGL2,\n  readPixelsToBuffer,\n  fp64 as fp64Utils,\n  withParameters\n} from '@luma.gl/core';\nimport {log} from '@deck.gl/core';\nimport {worldToPixels} from 'viewport-mercator-project';\nconst {fp64ifyMatrix4} = fp64Utils;\n\nimport {\n  AGGREGATION_OPERATION,\n  DEFAULT_CHANGE_FLAGS,\n  DEFAULT_RUN_PARAMS,\n  MAX_32_BIT_FLOAT,\n  MIN_BLEND_EQUATION,\n  MAX_BLEND_EQUATION,\n  MAX_MIN_BLEND_EQUATION,\n  EQUATION_MAP,\n  ELEMENTCOUNT,\n  DEFAULT_WEIGHT_PARAMS,\n  IDENTITY_MATRIX,\n  PIXEL_SIZE,\n  WEIGHT_SIZE\n} from './gpu-grid-aggregator-constants';\n\nimport AGGREGATE_TO_GRID_VS from './aggregate-to-grid-vs.glsl';\nimport AGGREGATE_TO_GRID_VS_FP64 from './aggregate-to-grid-vs-64.glsl';\nimport AGGREGATE_TO_GRID_FS from './aggregate-to-grid-fs.glsl';\nimport AGGREGATE_ALL_VS_FP64 from './aggregate-all-vs-64.glsl';\nimport AGGREGATE_ALL_FS from './aggregate-all-fs.glsl';\nimport TRANSFORM_MEAN_VS from './transform-mean-vs.glsl';\nimport {getFloatTexture, getFramebuffer, getFloatArray} from './gpu-grid-aggregator-utils.js';\n\nexport default class GPUGridAggregator {\n  // Decode and return aggregation data of given pixel.\n  static getAggregationData({aggregationData, maxData, pixelIndex}) {\n    log.assert(aggregationData.length >= (pixelIndex + 1) * PIXEL_SIZE);\n    log.assert(maxData.length === PIXEL_SIZE);\n    const index = pixelIndex * PIXEL_SIZE;\n    const cellCount = aggregationData[index + 3];\n    const cellWeight = aggregationData[index];\n    const totalCount = maxData[3];\n    const maxCellWieght = maxData[0];\n    return {\n      cellCount,\n      cellWeight,\n      totalCount,\n      maxCellWieght\n    };\n  }\n\n  // Decodes and retuns counts and weights of all cells\n  static getCellData({countsData, size = 1}) {\n    const numCells = countsData.length / 4;\n    const cellWeights = new Float32Array(numCells * size);\n    const cellCounts = new Uint32Array(numCells);\n    for (let i = 0; i < numCells; i++) {\n      // weights in RGB channels\n      for (let sizeIndex = 0; sizeIndex < size; sizeIndex++) {\n        cellWeights[i * size + sizeIndex] = countsData[i * 4 + sizeIndex];\n      }\n      // count in Alpha channel\n      cellCounts[i] = countsData[i * 4 + 3];\n    }\n    return {cellCounts, cellWeights};\n  }\n\n  // DEBUG ONLY\n  // static logData({aggregationBuffer, minBuffer, maxBuffer, maxMinBuffer}) {\n  //   const agrData = aggregationBuffer.getData();\n  //   for (let index = 0; index < agrData.length; index += 4) {\n  //     if (agrData[index + 3] > 0) {\n  //       console.log(\n  //         `index: ${index} weights: ${agrData[index]} ${agrData[index + 1]} ${\n  //           agrData[index + 2]\n  //         } count: ${agrData[index + 3]}`\n  //       );\n  //     }\n  //   }\n  // }\n\n  constructor(gl, opts = {}) {\n    this.id = opts.id || 'gpu-grid-aggregator';\n    this.shaderCache = opts.shaderCache || null;\n    this.gl = gl;\n    this.state = {\n      // cache weights and position data to process when data is not changed\n      weights: null,\n      gridPositions: null,\n      positionsBuffer: null,\n      positions64xyLowBuffer: null,\n      vertexCount: 0,\n\n      // flags/variables that affect the aggregation\n      fp64: null,\n      useGPU: null,\n      numCol: 0,\n      numRow: 0,\n      windowSize: null,\n      cellSize: null,\n\n      // per weight GPU resources\n      weightAttributes: {},\n      textures: {},\n      meanTextures: {},\n      buffers: {},\n      framebuffers: {},\n      maxMinFramebuffers: {},\n      minFramebuffers: {},\n      maxFramebuffers: {},\n      equations: {},\n      // common resources to be deleted\n      resources: {}\n    };\n    this._hasGPUSupport =\n      isWebGL2(gl) && // gl_InstanceID usage in min/max calculation shaders\n      hasFeatures(\n        this.gl,\n        FEATURES.BLEND_EQUATION_MINMAX, // set min/max blend modes\n        FEATURES.COLOR_ATTACHMENT_RGBA32F, // render to float texture\n        FEATURES.TEXTURE_FLOAT // sample from a float texture\n      );\n  }\n\n  // Delete owned resources.\n  /* eslint no-unused-expressions: [\"error\", { \"allowShortCircuit\": true }] */\n  delete() {\n    const {gridAggregationModel, allAggregationModel, meanTransform} = this;\n    const {\n      positionsBuffer,\n      position64Buffer,\n      textures,\n      framebuffers,\n      maxMinFramebuffers,\n      minFramebuffers,\n      maxFramebuffers,\n      meanTextures,\n      resources\n    } = this.state;\n\n    gridAggregationModel && gridAggregationModel.delete();\n    allAggregationModel && allAggregationModel.delete();\n    meanTransform && meanTransform.delete();\n\n    positionsBuffer && positionsBuffer.delete();\n    position64Buffer && position64Buffer.delete();\n    this.deleteResources([\n      framebuffers,\n      textures,\n      maxMinFramebuffers,\n      minFramebuffers,\n      maxFramebuffers,\n      meanTextures,\n      resources\n    ]);\n  }\n\n  // Perform aggregation and retun the results\n  run(opts = {}) {\n    const aggregationParams = this.getAggregationParams(opts);\n    this.updateGridSize(aggregationParams);\n    const {useGPU} = aggregationParams;\n    if (this._hasGPUSupport && useGPU) {\n      return this.runAggregationOnGPU(aggregationParams);\n    }\n    if (useGPU) {\n      log.warn('ScreenGridAggregator: GPU Aggregation not supported, falling back to CPU')();\n    }\n    return this.runAggregationOnCPU(aggregationParams);\n  }\n\n  // PRIVATE\n\n  deleteResources(resources) {\n    resources = Array.isArray(resources) ? resources : [resources];\n    resources.forEach(obj => {\n      for (const name in obj) {\n        obj[name].delete();\n      }\n    });\n  }\n\n  getAggregationParams(opts) {\n    const aggregationParams = Object.assign({}, DEFAULT_RUN_PARAMS, opts);\n    const {\n      useGPU,\n      gridTransformMatrix,\n      viewport,\n      weights,\n      projectPoints,\n      cellSize\n    } = aggregationParams;\n    if (this.state.useGPU !== useGPU) {\n      // CPU/GPU resources need to reinitialized, force set the change flags.\n      aggregationParams.changeFlags = Object.assign(\n        {},\n        aggregationParams.changeFlags,\n        DEFAULT_CHANGE_FLAGS\n      );\n    }\n    if (\n      cellSize &&\n      (!this.state.cellSize ||\n        this.state.cellSize[0] !== cellSize[0] ||\n        this.state.cellSize[1] !== cellSize[1])\n    ) {\n      aggregationParams.changeFlags.cellSizeChanged = true;\n      // For GridLayer aggregation, cellSize is calculated by parsing all input data as it depends\n      // on bounding box, cache cellSize\n      this.setState({cellSize});\n    }\n\n    this.validateProps(aggregationParams, opts);\n\n    this.setState({useGPU});\n    aggregationParams.gridTransformMatrix =\n      (projectPoints ? viewport.viewportMatrix : gridTransformMatrix) || IDENTITY_MATRIX;\n\n    if (weights) {\n      aggregationParams.weights = this.normalizeWeightParams(weights);\n\n      // cache weights to process when only cellSize or viewport is changed.\n      // position data is cached in Buffers for GPU case and in 'gridPositions' for CPU case.\n      this.setState({weights: aggregationParams.weights});\n    }\n    return aggregationParams;\n  }\n\n  normalizeWeightParams(weights) {\n    const result = {};\n    for (const id in weights) {\n      result[id] = Object.assign({}, DEFAULT_WEIGHT_PARAMS, weights[id]);\n    }\n    return result;\n  }\n\n  // Update priveate state\n  setState(updateObject) {\n    Object.assign(this.state, updateObject);\n  }\n\n  shouldTransformToGrid(opts) {\n    const {projectPoints, changeFlags} = opts;\n    if (\n      !this.state.gridPositions ||\n      changeFlags.dataChanged ||\n      (projectPoints && changeFlags.viewportChanged) // world space aggregation (GridLayer) doesn't change when viewport is changed.\n    ) {\n      return true;\n    }\n    return false;\n  }\n\n  updateGridSize(opts) {\n    const {viewport, cellSize} = opts;\n    const width = opts.width || viewport.width;\n    const height = opts.height || viewport.height;\n    const numCol = Math.ceil(width / cellSize[0]);\n    const numRow = Math.ceil(height / cellSize[1]);\n    this.setState({numCol, numRow, windowSize: [width, height]});\n  }\n\n  /* eslint-disable complexity */\n  // validate and log.assert\n  validateProps(aggregationParams, opts) {\n    const {changeFlags, projectPoints, gridTransformMatrix} = aggregationParams;\n    log.assert(\n      changeFlags.dataChanged || changeFlags.viewportChanged || changeFlags.cellSizeChanged\n    );\n\n    // log.assert for required options\n    log.assert(\n      !changeFlags.dataChanged ||\n        (opts.positions &&\n          opts.weights &&\n          (!opts.projectPositions || opts.viewport) &&\n          opts.cellSize)\n    );\n    log.assert(!changeFlags.cellSizeChanged || opts.cellSize);\n\n    // viewport need only when performing screen space aggregation (projectPoints is true)\n    log.assert(!(changeFlags.viewportChanged && projectPoints) || opts.viewport);\n\n    if (projectPoints && gridTransformMatrix) {\n      log.warn('projectPoints is true, gridTransformMatrix is ignored')();\n    }\n  }\n  /* eslint-enable complexity */\n\n  // CPU Aggregation methods\n\n  // aggregated weight value to a cell\n  /* eslint-disable max-depth */\n  calculateAggregationData(opts) {\n    const {weights, results, cellIndex, posIndex} = opts;\n    for (const id in weights) {\n      const {values, size, operation} = weights[id];\n      const {aggregationData} = results[id];\n\n      // Fill RGB with weights\n      for (let sizeIndex = 0; sizeIndex < size; sizeIndex++) {\n        const cellElementIndex = cellIndex + sizeIndex;\n        const weightComponent = values[posIndex * WEIGHT_SIZE + sizeIndex];\n\n        if (aggregationData[cellIndex + 3] === 0) {\n          // if the cell is getting update the first time, set the value directly.\n          aggregationData[cellElementIndex] = weightComponent;\n        } else {\n          switch (operation) {\n            case AGGREGATION_OPERATION.SUM:\n            case AGGREGATION_OPERATION.MEAN:\n              aggregationData[cellElementIndex] += weightComponent;\n              // MEAN value is calculated during 'calculateMeanMaxMinData'\n              break;\n            case AGGREGATION_OPERATION.MIN:\n              aggregationData[cellElementIndex] = Math.min(\n                aggregationData[cellElementIndex],\n                weightComponent\n              );\n              break;\n            case AGGREGATION_OPERATION.MAX:\n              aggregationData[cellElementIndex] = Math.max(\n                aggregationData[cellElementIndex],\n                weightComponent\n              );\n              break;\n            default:\n              // Not a valid operation enum.\n              log.assert(false);\n              break;\n          }\n        }\n      }\n\n      // Track the count per grid-cell\n      aggregationData[cellIndex + 3]++;\n    }\n  }\n\n  /* eslint-disable max-depth, complexity */\n  calculateMeanMaxMinData(opts) {\n    const {validCellIndices, results, weights} = opts;\n\n    // collect max/min values\n    validCellIndices.forEach(cellIndex => {\n      for (const id in results) {\n        const {size, needMin, needMax, operation} = weights[id];\n        const {aggregationData, minData, maxData, maxMinData} = results[id];\n        const calculateMinMax = needMin || needMax;\n        const calculateMean = operation === AGGREGATION_OPERATION.MEAN;\n        const combineMaxMin = needMin && needMax && weights[id].combineMaxMin;\n        const count = aggregationData[cellIndex + ELEMENTCOUNT - 1];\n        for (\n          let sizeIndex = 0;\n          sizeIndex < size && (calculateMinMax || calculateMean);\n          sizeIndex++\n        ) {\n          const cellElementIndex = cellIndex + sizeIndex;\n          let weight = aggregationData[cellElementIndex];\n          if (calculateMean) {\n            aggregationData[cellElementIndex] /= count;\n            weight = aggregationData[cellElementIndex];\n          }\n          if (combineMaxMin) {\n            // use RGB for max values for 3 weights.\n            maxMinData[sizeIndex] = Math.max(maxMinData[sizeIndex], weight);\n          } else {\n            if (needMin) {\n              minData[sizeIndex] = Math.min(minData[sizeIndex], weight);\n            }\n            if (needMax) {\n              maxData[sizeIndex] = Math.max(maxData[sizeIndex], weight);\n            }\n          }\n        }\n        // update total aggregation values.\n        if (combineMaxMin) {\n          // Use Alpha channel to store total min value for weight#0\n          maxMinData[ELEMENTCOUNT - 1] = Math.min(\n            maxMinData[ELEMENTCOUNT - 1],\n            aggregationData[cellIndex + 0]\n          );\n        } else {\n          // Use Alpha channel to store total counts.\n          if (needMin) {\n            minData[ELEMENTCOUNT - 1] += count;\n          }\n          if (needMax) {\n            maxData[ELEMENTCOUNT - 1] += count;\n          }\n        }\n      }\n    });\n  }\n  /* eslint-enable max-depth */\n\n  initCPUResults(opts) {\n    const weights = opts.weights || this.state.weights;\n    const {numCol, numRow} = this.state;\n    const results = {};\n    // setup results object\n    for (const id in weights) {\n      let {aggregationData, minData, maxData, maxMinData} = weights[id];\n      const {needMin, needMax} = weights[id];\n      const combineMaxMin = needMin && needMax && weights[id].combineMaxMin;\n\n      const aggregationSize = numCol * numRow * ELEMENTCOUNT;\n      aggregationData = getFloatArray(aggregationData, aggregationSize);\n      if (combineMaxMin) {\n        maxMinData = getFloatArray(maxMinData, ELEMENTCOUNT);\n        // RGB for max value\n        maxMinData.fill(-Infinity, 0, ELEMENTCOUNT - 1);\n        // Alpha for min value\n        maxMinData[ELEMENTCOUNT - 1] = Infinity;\n      } else {\n        // RGB for min/max values\n        // Alpha for total count\n        if (needMin) {\n          minData = getFloatArray(minData, ELEMENTCOUNT, Infinity);\n          minData[ELEMENTCOUNT - 1] = 0;\n        }\n        if (needMax) {\n          maxData = getFloatArray(maxData, ELEMENTCOUNT, -Infinity);\n          maxData[ELEMENTCOUNT - 1] = 0;\n        }\n      }\n      results[id] = Object.assign({}, weights[id], {\n        aggregationData,\n        minData,\n        maxData,\n        maxMinData\n      });\n    }\n    return results;\n  }\n\n  /* eslint-disable max-statements */\n  runAggregationOnCPU(opts) {\n    const {positions, cellSize, gridTransformMatrix, viewport, projectPoints} = opts;\n    let {weights} = opts;\n    const {numCol, numRow} = this.state;\n    const results = this.initCPUResults(opts);\n    // screen space or world space projection required\n    const gridTransformRequired = this.shouldTransformToGrid(opts);\n    let gridPositions;\n    const pos = [0, 0, 0];\n\n    log.assert(gridTransformRequired || opts.changeFlags.cellSizeChanged);\n\n    let posCount;\n    if (gridTransformRequired) {\n      posCount = positions.length / 2;\n      gridPositions = new Float64Array(positions.length);\n      this.setState({gridPositions});\n    } else {\n      gridPositions = this.state.gridPositions;\n      weights = this.state.weights;\n      posCount = gridPositions.length / 2;\n    }\n\n    const validCellIndices = new Set();\n    for (let posIndex = 0; posIndex < posCount; posIndex++) {\n      let x;\n      let y;\n      if (gridTransformRequired) {\n        pos[0] = positions[posIndex * 2];\n        pos[1] = positions[posIndex * 2 + 1];\n        if (projectPoints) {\n          [x, y] = viewport.project(pos);\n        } else {\n          [x, y] = worldToPixels(pos, gridTransformMatrix);\n        }\n        gridPositions[posIndex * 2] = x;\n        gridPositions[posIndex * 2 + 1] = y;\n      } else {\n        x = gridPositions[posIndex * 2];\n        y = gridPositions[posIndex * 2 + 1];\n      }\n\n      const colId = Math.floor(x / cellSize[0]);\n      const rowId = Math.floor(y / cellSize[1]);\n      if (colId >= 0 && colId < numCol && rowId >= 0 && rowId < numRow) {\n        const cellIndex = (colId + rowId * numCol) * ELEMENTCOUNT;\n        validCellIndices.add(cellIndex);\n        this.calculateAggregationData({weights, results, cellIndex, posIndex});\n      }\n    }\n\n    this.calculateMeanMaxMinData({validCellIndices, results, weights});\n\n    // Update buffer objects.\n    this.updateAggregationBuffers(opts, results);\n    return results;\n  }\n  /* eslint-disable max-statements */\n\n  updateResultBuffer({gl, bufferName, id, data, result}) {\n    const {resources} = this.state;\n    const resourceName = `${id}-${bufferName}`;\n    result[bufferName] = result[bufferName] || resources[resourceName];\n    if (result[bufferName]) {\n      result[bufferName].subData({data});\n    } else {\n      // save resource for garbage collection\n      resources[resourceName] = new Buffer(gl, data);\n      result[bufferName] = resources[resourceName];\n    }\n  }\n\n  updateAggregationBuffers(opts, results) {\n    if (!opts.createBufferObjects) {\n      return;\n    }\n    const weights = opts.weights || this.state.weights;\n    for (const id in results) {\n      const {aggregationData, minData, maxData, maxMinData} = results[id];\n      const {needMin, needMax} = weights[id];\n      const combineMaxMin = needMin && needMax && weights[id].combineMaxMin;\n      this.updateResultBuffer({\n        gl: this.gl,\n        bufferName: 'aggregationBuffer',\n        id,\n        data: aggregationData,\n        result: results[id]\n      });\n      if (combineMaxMin) {\n        this.updateResultBuffer({\n          gl: this.gl,\n          bufferName: 'maxMinBuffer',\n          id,\n          data: maxMinData,\n          result: results[id]\n        });\n      } else {\n        if (needMin) {\n          this.updateResultBuffer({\n            gl: this.gl,\n            bufferName: 'minBuffer',\n            id,\n            data: minData,\n            result: results[id]\n          });\n        }\n        if (needMax) {\n          this.updateResultBuffer({\n            gl: this.gl,\n            bufferName: 'maxBuffer',\n            id,\n            data: maxData,\n            result: results[id]\n          });\n        }\n      }\n    }\n  }\n\n  // GPU Aggregation methods\n\n  getAggregateData(opts) {\n    const results = {};\n    const {\n      textures,\n      framebuffers,\n      maxMinFramebuffers,\n      minFramebuffers,\n      maxFramebuffers,\n      weights\n    } = this.state;\n\n    for (const id in weights) {\n      results[id] = {};\n      const {needMin, needMax, combineMaxMin} = weights[id];\n      results[id].aggregationTexture = textures[id];\n      results[id].aggregationBuffer = readPixelsToBuffer(framebuffers[id], {\n        target: weights[id].aggregationBuffer, // update if a buffer is provided\n        sourceType: GL.FLOAT\n      });\n      if (needMin && needMax && combineMaxMin) {\n        results[id].maxMinBuffer = readPixelsToBuffer(maxMinFramebuffers[id], {\n          target: weights[id].maxMinBuffer, // update if a buffer is provided\n          sourceType: GL.FLOAT\n        });\n      } else {\n        if (needMin) {\n          results[id].minBuffer = readPixelsToBuffer(minFramebuffers[id], {\n            target: weights[id].minBuffer, // update if a buffer is provided\n            sourceType: GL.FLOAT\n          });\n        }\n        if (needMax) {\n          results[id].maxBuffer = readPixelsToBuffer(maxFramebuffers[id], {\n            target: weights[id].maxBuffer, // update if a buffer is provided\n            sourceType: GL.FLOAT\n          });\n        }\n      }\n    }\n    return results;\n  }\n\n  getAggregationModel(fp64 = false) {\n    const {gl, shaderCache} = this;\n    return new Model(gl, {\n      id: 'Gird-Aggregation-Model',\n      vs: fp64 ? AGGREGATE_TO_GRID_VS_FP64 : AGGREGATE_TO_GRID_VS,\n      fs: AGGREGATE_TO_GRID_FS,\n      modules: fp64 ? ['fp64', 'project64'] : ['project32'],\n      shaderCache,\n      vertexCount: 0,\n      drawMode: GL.POINTS\n    });\n  }\n\n  getAllAggregationModel(fp64 = false) {\n    const {gl, shaderCache} = this;\n    return new Model(gl, {\n      id: 'All-Aggregation-Model',\n      vs: AGGREGATE_ALL_VS_FP64,\n      fs: AGGREGATE_ALL_FS,\n      modules: ['fp64'],\n      shaderCache,\n      vertexCount: 1,\n      drawMode: GL.POINTS,\n      isInstanced: true,\n      instanceCount: 0,\n      attributes: {\n        position: [0, 0]\n      }\n    });\n  }\n\n  getMeanTransform(opts) {\n    if (this.meanTransform) {\n      this.meanTransform.update(opts);\n    } else {\n      this.meanTransform = new Transform(\n        this.gl,\n        Object.assign(\n          {},\n          {\n            vs: TRANSFORM_MEAN_VS,\n            _targetTextureVarying: 'meanValues'\n          },\n          opts\n        )\n      );\n    }\n    return this.meanTransform;\n  }\n\n  renderAggregateData(opts) {\n    const {cellSize, viewport, gridTransformMatrix, projectPoints} = opts;\n    const {\n      numCol,\n      numRow,\n      windowSize,\n      maxMinFramebuffers,\n      minFramebuffers,\n      maxFramebuffers,\n      weights\n    } = this.state;\n\n    const uProjectionMatrixFP64 = fp64ifyMatrix4(gridTransformMatrix);\n    const gridSize = [numCol, numRow];\n    const parameters = {\n      blend: true,\n      depthTest: false,\n      blendFunc: [GL.ONE, GL.ONE]\n    };\n    const moduleSettings = {viewport};\n    const uniforms = {\n      windowSize,\n      cellSize,\n      gridSize,\n      uProjectionMatrix: gridTransformMatrix,\n      uProjectionMatrixFP64,\n      projectPoints\n    };\n\n    for (const id in weights) {\n      const {needMin, needMax} = weights[id];\n      const combineMaxMin = needMin && needMax && weights[id].combineMaxMin;\n      this.renderToWeightsTexture({id, parameters, moduleSettings, uniforms, gridSize});\n      if (combineMaxMin) {\n        this.renderToMaxMinTexture({\n          id,\n          parameters: Object.assign({}, parameters, {blendEquation: MAX_MIN_BLEND_EQUATION}),\n          gridSize,\n          minOrMaxFb: maxMinFramebuffers[id],\n          clearParams: {clearColor: [0, 0, 0, MAX_32_BIT_FLOAT]},\n          combineMaxMin\n        });\n      } else {\n        if (needMin) {\n          this.renderToMaxMinTexture({\n            id,\n            parameters: Object.assign({}, parameters, {blendEquation: MIN_BLEND_EQUATION}),\n            gridSize,\n            minOrMaxFb: minFramebuffers[id],\n            clearParams: {clearColor: [MAX_32_BIT_FLOAT, MAX_32_BIT_FLOAT, MAX_32_BIT_FLOAT, 0]},\n            combineMaxMin\n          });\n        }\n        if (needMax) {\n          this.renderToMaxMinTexture({\n            id,\n            parameters: Object.assign({}, parameters, {blendEquation: MAX_BLEND_EQUATION}),\n            gridSize,\n            minOrMaxFb: maxFramebuffers[id],\n            combineMaxMin\n          });\n        }\n      }\n    }\n  }\n\n  // render all aggregated grid-cells to generate Min, Max or MaxMin data texture\n  renderToMaxMinTexture(opts) {\n    const {id, parameters, gridSize, minOrMaxFb, combineMaxMin, clearParams = {}} = opts;\n    const {framebuffers} = this.state;\n    const {gl, allAggregationModel} = this;\n\n    minOrMaxFb.bind();\n    gl.viewport(0, 0, gridSize[0], gridSize[1]);\n    withParameters(gl, clearParams, () => {\n      gl.clear(gl.COLOR_BUFFER_BIT);\n    });\n    allAggregationModel.draw({\n      parameters,\n      uniforms: {\n        uSampler: framebuffers[id].texture,\n        gridSize,\n        combineMaxMin\n      }\n    });\n    minOrMaxFb.unbind();\n  }\n\n  // render all data points to aggregate weights\n  renderToWeightsTexture(opts) {\n    const {id, parameters, moduleSettings, uniforms, gridSize} = opts;\n    const {framebuffers, equations, weightAttributes, weights} = this.state;\n    const {gl, gridAggregationModel} = this;\n    const {operation} = weights[id];\n\n    framebuffers[id].bind();\n    gl.viewport(0, 0, gridSize[0], gridSize[1]);\n    const clearColor =\n      operation === AGGREGATION_OPERATION.MIN\n        ? [MAX_32_BIT_FLOAT, MAX_32_BIT_FLOAT, MAX_32_BIT_FLOAT, 0]\n        : [0, 0, 0, 0];\n    withParameters(gl, {clearColor}, () => {\n      gl.clear(gl.COLOR_BUFFER_BIT);\n    });\n\n    const attributes = {weights: weightAttributes[id]};\n    gridAggregationModel.draw({\n      parameters: Object.assign({}, parameters, {blendEquation: equations[id]}),\n      moduleSettings,\n      uniforms,\n      attributes\n    });\n    framebuffers[id].unbind();\n\n    if (operation === AGGREGATION_OPERATION.MEAN) {\n      const {meanTextures, textures} = this.state;\n      const transformOptions = {\n        _sourceTextures: {aggregationValues: meanTextures[id]}, // contains aggregated data\n        _targetTexture: textures[id], // store mean values,\n        elementCount: textures[id].width * textures[id].height\n      };\n      const meanTransform = this.getMeanTransform(transformOptions);\n      meanTransform.run({\n        parameters: {\n          blend: false,\n          depthTest: false\n        }\n      });\n\n      // update framebuffer with mean results so readPixelsToBuffer returns mean values\n      framebuffers[id].attach({[GL.COLOR_ATTACHMENT0]: textures[id]});\n    }\n  }\n\n  runAggregationOnGPU(opts) {\n    this.updateModels(opts);\n    this.setupFramebuffers(opts);\n    this.renderAggregateData(opts);\n    return this.getAggregateData(opts);\n  }\n\n  // set up framebuffer for each weight\n  /* eslint-disable complexity, max-depth */\n  setupFramebuffers(opts) {\n    const {\n      numCol,\n      numRow,\n      textures,\n      framebuffers,\n      maxMinFramebuffers,\n      minFramebuffers,\n      maxFramebuffers,\n      resources,\n      meanTextures,\n      equations,\n      weights\n    } = this.state;\n    const framebufferSize = {width: numCol, height: numRow};\n    for (const id in weights) {\n      const {needMin, needMax, combineMaxMin, operation} = weights[id];\n      textures[id] =\n        weights[id].aggregationTexture ||\n        textures[id] ||\n        getFloatTexture(this.gl, {id: `${id}-texture`, width: numCol, height: numRow});\n      textures[id].resize(framebufferSize);\n      let texture = textures[id];\n      if (operation === AGGREGATION_OPERATION.MEAN) {\n        // For MEAN, we first aggregatet into a temp texture\n        meanTextures[id] =\n          meanTextures[id] ||\n          getFloatTexture(this.gl, {id: `${id}-mean-texture`, width: numCol, height: numRow});\n        meanTextures[id].resize(framebufferSize);\n        texture = meanTextures[id];\n      }\n      if (framebuffers[id]) {\n        framebuffers[id].attach({[GL.COLOR_ATTACHMENT0]: texture});\n      } else {\n        framebuffers[id] = getFramebuffer(this.gl, {\n          id: `${id}-fb`,\n          width: numCol,\n          height: numRow,\n          texture\n        });\n      }\n      framebuffers[id].resize(framebufferSize);\n      equations[id] = EQUATION_MAP[operation];\n      // For min/max framebuffers will use default size 1X1\n      if (needMin || needMax) {\n        if (needMin && needMax && combineMaxMin) {\n          if (!maxMinFramebuffers[id]) {\n            resources[`${id}-maxMin`] = getFloatTexture(this.gl, {id: `${id}-maxMinTex`});\n            maxMinFramebuffers[id] = getFramebuffer(this.gl, {\n              id: `${id}-maxMinFb`,\n              texture: resources[`${id}-maxMin`]\n            });\n          }\n        } else {\n          if (needMin) {\n            if (!minFramebuffers[id]) {\n              resources[`${id}-min`] = getFloatTexture(this.gl, {id: `${id}-minTex`});\n              minFramebuffers[id] = getFramebuffer(this.gl, {\n                id: `${id}-minFb`,\n                texture: resources[`${id}-min`]\n              });\n            }\n          }\n          if (needMax) {\n            if (!maxFramebuffers[id]) {\n              resources[`${id}-max`] = getFloatTexture(this.gl, {id: `${id}-maxTex`});\n              maxFramebuffers[id] = getFramebuffer(this.gl, {\n                id: `${id}-maxFb`,\n                texture: resources[`${id}-max`]\n              });\n            }\n          }\n        }\n      }\n    }\n  }\n  /* eslint-enable complexity, max-depth */\n\n  setupModels(fp64 = false) {\n    if (this.gridAggregationModel) {\n      this.gridAggregationModel.delete();\n    }\n    this.gridAggregationModel = this.getAggregationModel(fp64);\n    if (this.allAggregationModel) {\n      this.allAggregationModel.delete();\n    }\n    this.allAggregationModel = this.getAllAggregationModel(fp64);\n  }\n\n  // set up buffers for all weights\n  setupWeightAttributes(opts) {\n    const {weightAttributes, vertexCount, weights, resources} = this.state;\n    for (const id in weights) {\n      const {values} = weights[id];\n      // values can be Array, Float32Array or Buffer\n      if (Array.isArray(values) || values.constructor === Float32Array) {\n        log.assert(values.length / 3 === vertexCount);\n        const typedArray = Array.isArray(values) ? new Float32Array(values) : values;\n        if (weightAttributes[id] instanceof Buffer) {\n          weightAttributes[id].setData(typedArray);\n        } else {\n          resources[`${id}-buffer`] = new Buffer(this.gl, typedArray);\n          weightAttributes[id] = resources[`${id}-buffer`];\n        }\n      } else {\n        // log.assert((values instanceof Attribute) || (values instanceof Buffer));\n        log.assert(values instanceof Buffer);\n        weightAttributes[id] = values;\n      }\n    }\n  }\n\n  /* eslint-disable max-statements */\n  updateModels(opts) {\n    const {gl} = this;\n    const {positions, positions64xyLow, changeFlags} = opts;\n    const {numCol, numRow} = this.state;\n\n    let {positionsBuffer, positions64xyLowBuffer} = this.state;\n\n    const aggregationModelAttributes = {};\n\n    let createPos64xyLow = false;\n    if (opts.fp64 !== this.state.fp64) {\n      this.setupModels(opts.fp64);\n      this.setState({fp64: opts.fp64});\n      if (opts.fp64) {\n        createPos64xyLow = true;\n      }\n    }\n\n    if (changeFlags.dataChanged || !positionsBuffer) {\n      if (positionsBuffer) {\n        positionsBuffer.delete();\n      }\n      const vertexCount = positions.length / 2;\n      // positionsBuffer = new Buffer(gl, {size: 2, data: new Float32Array(positions)});\n      positionsBuffer = new Buffer(gl, new Float32Array(positions));\n      createPos64xyLow = opts.fp64;\n      Object.assign(aggregationModelAttributes, {\n        positions: positionsBuffer\n      });\n      this.setState({positionsBuffer, vertexCount});\n\n      this.setupWeightAttributes(opts);\n      this.gridAggregationModel.setVertexCount(vertexCount);\n    }\n\n    if (createPos64xyLow) {\n      log.assert(positions64xyLow);\n      if (positions64xyLowBuffer) {\n        positions64xyLowBuffer.delete();\n      }\n      positions64xyLowBuffer = new Buffer(gl, {size: 2, data: new Float32Array(positions64xyLow)});\n      Object.assign(aggregationModelAttributes, {\n        positions64xyLow: positions64xyLowBuffer\n      });\n      this.setState({positions64xyLowBuffer});\n    }\n\n    this.gridAggregationModel.setAttributes(aggregationModelAttributes);\n\n    if (changeFlags.cellSizeChanged || changeFlags.viewportChanged) {\n      this.allAggregationModel.setInstanceCount(numCol * numRow);\n    }\n  }\n  /* eslint-enable max-statements */\n}\n"],"file":"gpu-grid-aggregator.js"}