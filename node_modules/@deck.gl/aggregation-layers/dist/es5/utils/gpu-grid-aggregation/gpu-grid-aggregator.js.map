{"version":3,"sources":["../../../../src/utils/gpu-grid-aggregation/gpu-grid-aggregator.js"],"names":["fp64ifyMatrix4","fp64Utils","GPUGridAggregator","aggregationData","maxData","pixelIndex","log","assert","length","PIXEL_SIZE","index","cellCount","cellWeight","totalCount","maxCellWieght","countsData","size","numCells","cellWeights","Float32Array","cellCounts","Uint32Array","i","sizeIndex","gl","opts","id","shaderCache","state","weights","gridPositions","positionsBuffer","positions64xyLowBuffer","vertexCount","fp64","useGPU","numCol","numRow","windowSize","cellSize","weightAttributes","textures","meanTextures","buffers","framebuffers","maxMinFramebuffers","minFramebuffers","maxFramebuffers","equations","resources","_hasGPUSupport","FEATURES","BLEND_EQUATION_MINMAX","COLOR_ATTACHMENT_RGBA32F","TEXTURE_FLOAT","gridAggregationModel","allAggregationModel","meanTransform","position64Buffer","delete","deleteResources","aggregationParams","getAggregationParams","updateGridSize","runAggregationOnGPU","warn","runAggregationOnCPU","Array","isArray","forEach","obj","name","Object","assign","DEFAULT_RUN_PARAMS","gridTransformMatrix","viewport","projectPoints","changeFlags","DEFAULT_CHANGE_FLAGS","cellSizeChanged","setState","validateProps","viewportMatrix","IDENTITY_MATRIX","normalizeWeightParams","result","DEFAULT_WEIGHT_PARAMS","updateObject","dataChanged","viewportChanged","width","height","Math","ceil","positions","projectPositions","results","cellIndex","posIndex","values","operation","cellElementIndex","weightComponent","WEIGHT_SIZE","AGGREGATION_OPERATION","SUM","MEAN","MIN","min","MAX","max","validCellIndices","needMin","needMax","minData","maxMinData","calculateMinMax","calculateMean","combineMaxMin","count","ELEMENTCOUNT","weight","aggregationSize","fill","Infinity","initCPUResults","gridTransformRequired","shouldTransformToGrid","pos","posCount","Float64Array","Set","x","y","project","colId","floor","rowId","add","calculateAggregationData","calculateMeanMaxMinData","updateAggregationBuffers","bufferName","data","resourceName","subData","Buffer","createBufferObjects","updateResultBuffer","aggregationTexture","aggregationBuffer","target","sourceType","maxMinBuffer","minBuffer","maxBuffer","Model","vs","AGGREGATE_TO_GRID_VS_FP64","AGGREGATE_TO_GRID_VS","fs","AGGREGATE_TO_GRID_FS","modules","drawMode","AGGREGATE_ALL_VS_FP64","AGGREGATE_ALL_FS","isInstanced","instanceCount","attributes","position","update","Transform","TRANSFORM_MEAN_VS","_targetTextureVarying","uProjectionMatrixFP64","gridSize","parameters","blend","depthTest","blendFunc","moduleSettings","uniforms","uProjectionMatrix","renderToWeightsTexture","renderToMaxMinTexture","blendEquation","MAX_MIN_BLEND_EQUATION","minOrMaxFb","clearParams","clearColor","MAX_32_BIT_FLOAT","MIN_BLEND_EQUATION","MAX_BLEND_EQUATION","bind","clear","draw","uSampler","texture","unbind","transformOptions","_sourceTextures","aggregationValues","_targetTexture","elementCount","getMeanTransform","run","attach","updateModels","setupFramebuffers","renderAggregateData","getAggregateData","framebufferSize","resize","EQUATION_MAP","getAggregationModel","getAllAggregationModel","constructor","typedArray","setData","positions64xyLow","aggregationModelAttributes","createPos64xyLow","setupModels","setupWeightAttributes","setVertexCount","setAttributes","setInstanceCount"],"mappings":"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","sourcesContent":["import GL from '@luma.gl/constants';\nimport {\n  Buffer,\n  Model,\n  Transform,\n  FEATURES,\n  hasFeatures,\n  isWebGL2,\n  readPixelsToBuffer,\n  fp64 as fp64Utils,\n  withParameters\n} from '@luma.gl/core';\nimport {log} from '@deck.gl/core';\nimport {worldToPixels} from 'viewport-mercator-project';\nconst {fp64ifyMatrix4} = fp64Utils;\n\nimport {\n  AGGREGATION_OPERATION,\n  DEFAULT_CHANGE_FLAGS,\n  DEFAULT_RUN_PARAMS,\n  MAX_32_BIT_FLOAT,\n  MIN_BLEND_EQUATION,\n  MAX_BLEND_EQUATION,\n  MAX_MIN_BLEND_EQUATION,\n  EQUATION_MAP,\n  ELEMENTCOUNT,\n  DEFAULT_WEIGHT_PARAMS,\n  IDENTITY_MATRIX,\n  PIXEL_SIZE,\n  WEIGHT_SIZE\n} from './gpu-grid-aggregator-constants';\n\nimport AGGREGATE_TO_GRID_VS from './aggregate-to-grid-vs.glsl';\nimport AGGREGATE_TO_GRID_VS_FP64 from './aggregate-to-grid-vs-64.glsl';\nimport AGGREGATE_TO_GRID_FS from './aggregate-to-grid-fs.glsl';\nimport AGGREGATE_ALL_VS_FP64 from './aggregate-all-vs-64.glsl';\nimport AGGREGATE_ALL_FS from './aggregate-all-fs.glsl';\nimport TRANSFORM_MEAN_VS from './transform-mean-vs.glsl';\nimport {getFloatTexture, getFramebuffer, getFloatArray} from './gpu-grid-aggregator-utils.js';\n\nexport default class GPUGridAggregator {\n  // Decode and return aggregation data of given pixel.\n  static getAggregationData({aggregationData, maxData, pixelIndex}) {\n    log.assert(aggregationData.length >= (pixelIndex + 1) * PIXEL_SIZE);\n    log.assert(maxData.length === PIXEL_SIZE);\n    const index = pixelIndex * PIXEL_SIZE;\n    const cellCount = aggregationData[index + 3];\n    const cellWeight = aggregationData[index];\n    const totalCount = maxData[3];\n    const maxCellWieght = maxData[0];\n    return {\n      cellCount,\n      cellWeight,\n      totalCount,\n      maxCellWieght\n    };\n  }\n\n  // Decodes and retuns counts and weights of all cells\n  static getCellData({countsData, size = 1}) {\n    const numCells = countsData.length / 4;\n    const cellWeights = new Float32Array(numCells * size);\n    const cellCounts = new Uint32Array(numCells);\n    for (let i = 0; i < numCells; i++) {\n      // weights in RGB channels\n      for (let sizeIndex = 0; sizeIndex < size; sizeIndex++) {\n        cellWeights[i * size + sizeIndex] = countsData[i * 4 + sizeIndex];\n      }\n      // count in Alpha channel\n      cellCounts[i] = countsData[i * 4 + 3];\n    }\n    return {cellCounts, cellWeights};\n  }\n\n  // DEBUG ONLY\n  // static logData({aggregationBuffer, minBuffer, maxBuffer, maxMinBuffer}) {\n  //   const agrData = aggregationBuffer.getData();\n  //   for (let index = 0; index < agrData.length; index += 4) {\n  //     if (agrData[index + 3] > 0) {\n  //       console.log(\n  //         `index: ${index} weights: ${agrData[index]} ${agrData[index + 1]} ${\n  //           agrData[index + 2]\n  //         } count: ${agrData[index + 3]}`\n  //       );\n  //     }\n  //   }\n  // }\n\n  constructor(gl, opts = {}) {\n    this.id = opts.id || 'gpu-grid-aggregator';\n    this.shaderCache = opts.shaderCache || null;\n    this.gl = gl;\n    this.state = {\n      // cache weights and position data to process when data is not changed\n      weights: null,\n      gridPositions: null,\n      positionsBuffer: null,\n      positions64xyLowBuffer: null,\n      vertexCount: 0,\n\n      // flags/variables that affect the aggregation\n      fp64: null,\n      useGPU: null,\n      numCol: 0,\n      numRow: 0,\n      windowSize: null,\n      cellSize: null,\n\n      // per weight GPU resources\n      weightAttributes: {},\n      textures: {},\n      meanTextures: {},\n      buffers: {},\n      framebuffers: {},\n      maxMinFramebuffers: {},\n      minFramebuffers: {},\n      maxFramebuffers: {},\n      equations: {},\n      // common resources to be deleted\n      resources: {}\n    };\n    this._hasGPUSupport =\n      isWebGL2(gl) && // gl_InstanceID usage in min/max calculation shaders\n      hasFeatures(\n        this.gl,\n        FEATURES.BLEND_EQUATION_MINMAX, // set min/max blend modes\n        FEATURES.COLOR_ATTACHMENT_RGBA32F, // render to float texture\n        FEATURES.TEXTURE_FLOAT // sample from a float texture\n      );\n  }\n\n  // Delete owned resources.\n  /* eslint no-unused-expressions: [\"error\", { \"allowShortCircuit\": true }] */\n  delete() {\n    const {gridAggregationModel, allAggregationModel, meanTransform} = this;\n    const {\n      positionsBuffer,\n      position64Buffer,\n      textures,\n      framebuffers,\n      maxMinFramebuffers,\n      minFramebuffers,\n      maxFramebuffers,\n      meanTextures,\n      resources\n    } = this.state;\n\n    gridAggregationModel && gridAggregationModel.delete();\n    allAggregationModel && allAggregationModel.delete();\n    meanTransform && meanTransform.delete();\n\n    positionsBuffer && positionsBuffer.delete();\n    position64Buffer && position64Buffer.delete();\n    this.deleteResources([\n      framebuffers,\n      textures,\n      maxMinFramebuffers,\n      minFramebuffers,\n      maxFramebuffers,\n      meanTextures,\n      resources\n    ]);\n  }\n\n  // Perform aggregation and retun the results\n  run(opts = {}) {\n    const aggregationParams = this.getAggregationParams(opts);\n    this.updateGridSize(aggregationParams);\n    const {useGPU} = aggregationParams;\n    if (this._hasGPUSupport && useGPU) {\n      return this.runAggregationOnGPU(aggregationParams);\n    }\n    if (useGPU) {\n      log.warn('ScreenGridAggregator: GPU Aggregation not supported, falling back to CPU')();\n    }\n    return this.runAggregationOnCPU(aggregationParams);\n  }\n\n  // PRIVATE\n\n  deleteResources(resources) {\n    resources = Array.isArray(resources) ? resources : [resources];\n    resources.forEach(obj => {\n      for (const name in obj) {\n        obj[name].delete();\n      }\n    });\n  }\n\n  getAggregationParams(opts) {\n    const aggregationParams = Object.assign({}, DEFAULT_RUN_PARAMS, opts);\n    const {\n      useGPU,\n      gridTransformMatrix,\n      viewport,\n      weights,\n      projectPoints,\n      cellSize\n    } = aggregationParams;\n    if (this.state.useGPU !== useGPU) {\n      // CPU/GPU resources need to reinitialized, force set the change flags.\n      aggregationParams.changeFlags = Object.assign(\n        {},\n        aggregationParams.changeFlags,\n        DEFAULT_CHANGE_FLAGS\n      );\n    }\n    if (\n      cellSize &&\n      (!this.state.cellSize ||\n        this.state.cellSize[0] !== cellSize[0] ||\n        this.state.cellSize[1] !== cellSize[1])\n    ) {\n      aggregationParams.changeFlags.cellSizeChanged = true;\n      // For GridLayer aggregation, cellSize is calculated by parsing all input data as it depends\n      // on bounding box, cache cellSize\n      this.setState({cellSize});\n    }\n\n    this.validateProps(aggregationParams, opts);\n\n    this.setState({useGPU});\n    aggregationParams.gridTransformMatrix =\n      (projectPoints ? viewport.viewportMatrix : gridTransformMatrix) || IDENTITY_MATRIX;\n\n    if (weights) {\n      aggregationParams.weights = this.normalizeWeightParams(weights);\n\n      // cache weights to process when only cellSize or viewport is changed.\n      // position data is cached in Buffers for GPU case and in 'gridPositions' for CPU case.\n      this.setState({weights: aggregationParams.weights});\n    }\n    return aggregationParams;\n  }\n\n  normalizeWeightParams(weights) {\n    const result = {};\n    for (const id in weights) {\n      result[id] = Object.assign({}, DEFAULT_WEIGHT_PARAMS, weights[id]);\n    }\n    return result;\n  }\n\n  // Update priveate state\n  setState(updateObject) {\n    Object.assign(this.state, updateObject);\n  }\n\n  shouldTransformToGrid(opts) {\n    const {projectPoints, changeFlags} = opts;\n    if (\n      !this.state.gridPositions ||\n      changeFlags.dataChanged ||\n      (projectPoints && changeFlags.viewportChanged) // world space aggregation (GridLayer) doesn't change when viewport is changed.\n    ) {\n      return true;\n    }\n    return false;\n  }\n\n  updateGridSize(opts) {\n    const {viewport, cellSize} = opts;\n    const width = opts.width || viewport.width;\n    const height = opts.height || viewport.height;\n    const numCol = Math.ceil(width / cellSize[0]);\n    const numRow = Math.ceil(height / cellSize[1]);\n    this.setState({numCol, numRow, windowSize: [width, height]});\n  }\n\n  /* eslint-disable complexity */\n  // validate and log.assert\n  validateProps(aggregationParams, opts) {\n    const {changeFlags, projectPoints, gridTransformMatrix} = aggregationParams;\n    log.assert(\n      changeFlags.dataChanged || changeFlags.viewportChanged || changeFlags.cellSizeChanged\n    );\n\n    // log.assert for required options\n    log.assert(\n      !changeFlags.dataChanged ||\n        (opts.positions &&\n          opts.weights &&\n          (!opts.projectPositions || opts.viewport) &&\n          opts.cellSize)\n    );\n    log.assert(!changeFlags.cellSizeChanged || opts.cellSize);\n\n    // viewport need only when performing screen space aggregation (projectPoints is true)\n    log.assert(!(changeFlags.viewportChanged && projectPoints) || opts.viewport);\n\n    if (projectPoints && gridTransformMatrix) {\n      log.warn('projectPoints is true, gridTransformMatrix is ignored')();\n    }\n  }\n  /* eslint-enable complexity */\n\n  // CPU Aggregation methods\n\n  // aggregated weight value to a cell\n  /* eslint-disable max-depth */\n  calculateAggregationData(opts) {\n    const {weights, results, cellIndex, posIndex} = opts;\n    for (const id in weights) {\n      const {values, size, operation} = weights[id];\n      const {aggregationData} = results[id];\n\n      // Fill RGB with weights\n      for (let sizeIndex = 0; sizeIndex < size; sizeIndex++) {\n        const cellElementIndex = cellIndex + sizeIndex;\n        const weightComponent = values[posIndex * WEIGHT_SIZE + sizeIndex];\n\n        if (aggregationData[cellIndex + 3] === 0) {\n          // if the cell is getting update the first time, set the value directly.\n          aggregationData[cellElementIndex] = weightComponent;\n        } else {\n          switch (operation) {\n            case AGGREGATION_OPERATION.SUM:\n            case AGGREGATION_OPERATION.MEAN:\n              aggregationData[cellElementIndex] += weightComponent;\n              // MEAN value is calculated during 'calculateMeanMaxMinData'\n              break;\n            case AGGREGATION_OPERATION.MIN:\n              aggregationData[cellElementIndex] = Math.min(\n                aggregationData[cellElementIndex],\n                weightComponent\n              );\n              break;\n            case AGGREGATION_OPERATION.MAX:\n              aggregationData[cellElementIndex] = Math.max(\n                aggregationData[cellElementIndex],\n                weightComponent\n              );\n              break;\n            default:\n              // Not a valid operation enum.\n              log.assert(false);\n              break;\n          }\n        }\n      }\n\n      // Track the count per grid-cell\n      aggregationData[cellIndex + 3]++;\n    }\n  }\n\n  /* eslint-disable max-depth, complexity */\n  calculateMeanMaxMinData(opts) {\n    const {validCellIndices, results, weights} = opts;\n\n    // collect max/min values\n    validCellIndices.forEach(cellIndex => {\n      for (const id in results) {\n        const {size, needMin, needMax, operation} = weights[id];\n        const {aggregationData, minData, maxData, maxMinData} = results[id];\n        const calculateMinMax = needMin || needMax;\n        const calculateMean = operation === AGGREGATION_OPERATION.MEAN;\n        const combineMaxMin = needMin && needMax && weights[id].combineMaxMin;\n        const count = aggregationData[cellIndex + ELEMENTCOUNT - 1];\n        for (\n          let sizeIndex = 0;\n          sizeIndex < size && (calculateMinMax || calculateMean);\n          sizeIndex++\n        ) {\n          const cellElementIndex = cellIndex + sizeIndex;\n          let weight = aggregationData[cellElementIndex];\n          if (calculateMean) {\n            aggregationData[cellElementIndex] /= count;\n            weight = aggregationData[cellElementIndex];\n          }\n          if (combineMaxMin) {\n            // use RGB for max values for 3 weights.\n            maxMinData[sizeIndex] = Math.max(maxMinData[sizeIndex], weight);\n          } else {\n            if (needMin) {\n              minData[sizeIndex] = Math.min(minData[sizeIndex], weight);\n            }\n            if (needMax) {\n              maxData[sizeIndex] = Math.max(maxData[sizeIndex], weight);\n            }\n          }\n        }\n        // update total aggregation values.\n        if (combineMaxMin) {\n          // Use Alpha channel to store total min value for weight#0\n          maxMinData[ELEMENTCOUNT - 1] = Math.min(\n            maxMinData[ELEMENTCOUNT - 1],\n            aggregationData[cellIndex + 0]\n          );\n        } else {\n          // Use Alpha channel to store total counts.\n          if (needMin) {\n            minData[ELEMENTCOUNT - 1] += count;\n          }\n          if (needMax) {\n            maxData[ELEMENTCOUNT - 1] += count;\n          }\n        }\n      }\n    });\n  }\n  /* eslint-enable max-depth */\n\n  initCPUResults(opts) {\n    const weights = opts.weights || this.state.weights;\n    const {numCol, numRow} = this.state;\n    const results = {};\n    // setup results object\n    for (const id in weights) {\n      let {aggregationData, minData, maxData, maxMinData} = weights[id];\n      const {needMin, needMax} = weights[id];\n      const combineMaxMin = needMin && needMax && weights[id].combineMaxMin;\n\n      const aggregationSize = numCol * numRow * ELEMENTCOUNT;\n      aggregationData = getFloatArray(aggregationData, aggregationSize);\n      if (combineMaxMin) {\n        maxMinData = getFloatArray(maxMinData, ELEMENTCOUNT);\n        // RGB for max value\n        maxMinData.fill(-Infinity, 0, ELEMENTCOUNT - 1);\n        // Alpha for min value\n        maxMinData[ELEMENTCOUNT - 1] = Infinity;\n      } else {\n        // RGB for min/max values\n        // Alpha for total count\n        if (needMin) {\n          minData = getFloatArray(minData, ELEMENTCOUNT, Infinity);\n          minData[ELEMENTCOUNT - 1] = 0;\n        }\n        if (needMax) {\n          maxData = getFloatArray(maxData, ELEMENTCOUNT, -Infinity);\n          maxData[ELEMENTCOUNT - 1] = 0;\n        }\n      }\n      results[id] = Object.assign({}, weights[id], {\n        aggregationData,\n        minData,\n        maxData,\n        maxMinData\n      });\n    }\n    return results;\n  }\n\n  /* eslint-disable max-statements */\n  runAggregationOnCPU(opts) {\n    const {positions, cellSize, gridTransformMatrix, viewport, projectPoints} = opts;\n    let {weights} = opts;\n    const {numCol, numRow} = this.state;\n    const results = this.initCPUResults(opts);\n    // screen space or world space projection required\n    const gridTransformRequired = this.shouldTransformToGrid(opts);\n    let gridPositions;\n    const pos = [0, 0, 0];\n\n    log.assert(gridTransformRequired || opts.changeFlags.cellSizeChanged);\n\n    let posCount;\n    if (gridTransformRequired) {\n      posCount = positions.length / 2;\n      gridPositions = new Float64Array(positions.length);\n      this.setState({gridPositions});\n    } else {\n      gridPositions = this.state.gridPositions;\n      weights = this.state.weights;\n      posCount = gridPositions.length / 2;\n    }\n\n    const validCellIndices = new Set();\n    for (let posIndex = 0; posIndex < posCount; posIndex++) {\n      let x;\n      let y;\n      if (gridTransformRequired) {\n        pos[0] = positions[posIndex * 2];\n        pos[1] = positions[posIndex * 2 + 1];\n        if (projectPoints) {\n          [x, y] = viewport.project(pos);\n        } else {\n          [x, y] = worldToPixels(pos, gridTransformMatrix);\n        }\n        gridPositions[posIndex * 2] = x;\n        gridPositions[posIndex * 2 + 1] = y;\n      } else {\n        x = gridPositions[posIndex * 2];\n        y = gridPositions[posIndex * 2 + 1];\n      }\n\n      const colId = Math.floor(x / cellSize[0]);\n      const rowId = Math.floor(y / cellSize[1]);\n      if (colId >= 0 && colId < numCol && rowId >= 0 && rowId < numRow) {\n        const cellIndex = (colId + rowId * numCol) * ELEMENTCOUNT;\n        validCellIndices.add(cellIndex);\n        this.calculateAggregationData({weights, results, cellIndex, posIndex});\n      }\n    }\n\n    this.calculateMeanMaxMinData({validCellIndices, results, weights});\n\n    // Update buffer objects.\n    this.updateAggregationBuffers(opts, results);\n    return results;\n  }\n  /* eslint-disable max-statements */\n\n  updateResultBuffer({gl, bufferName, id, data, result}) {\n    const {resources} = this.state;\n    const resourceName = `${id}-${bufferName}`;\n    result[bufferName] = result[bufferName] || resources[resourceName];\n    if (result[bufferName]) {\n      result[bufferName].subData({data});\n    } else {\n      // save resource for garbage collection\n      resources[resourceName] = new Buffer(gl, data);\n      result[bufferName] = resources[resourceName];\n    }\n  }\n\n  updateAggregationBuffers(opts, results) {\n    if (!opts.createBufferObjects) {\n      return;\n    }\n    const weights = opts.weights || this.state.weights;\n    for (const id in results) {\n      const {aggregationData, minData, maxData, maxMinData} = results[id];\n      const {needMin, needMax} = weights[id];\n      const combineMaxMin = needMin && needMax && weights[id].combineMaxMin;\n      this.updateResultBuffer({\n        gl: this.gl,\n        bufferName: 'aggregationBuffer',\n        id,\n        data: aggregationData,\n        result: results[id]\n      });\n      if (combineMaxMin) {\n        this.updateResultBuffer({\n          gl: this.gl,\n          bufferName: 'maxMinBuffer',\n          id,\n          data: maxMinData,\n          result: results[id]\n        });\n      } else {\n        if (needMin) {\n          this.updateResultBuffer({\n            gl: this.gl,\n            bufferName: 'minBuffer',\n            id,\n            data: minData,\n            result: results[id]\n          });\n        }\n        if (needMax) {\n          this.updateResultBuffer({\n            gl: this.gl,\n            bufferName: 'maxBuffer',\n            id,\n            data: maxData,\n            result: results[id]\n          });\n        }\n      }\n    }\n  }\n\n  // GPU Aggregation methods\n\n  getAggregateData(opts) {\n    const results = {};\n    const {\n      textures,\n      framebuffers,\n      maxMinFramebuffers,\n      minFramebuffers,\n      maxFramebuffers,\n      weights\n    } = this.state;\n\n    for (const id in weights) {\n      results[id] = {};\n      const {needMin, needMax, combineMaxMin} = weights[id];\n      results[id].aggregationTexture = textures[id];\n      results[id].aggregationBuffer = readPixelsToBuffer(framebuffers[id], {\n        target: weights[id].aggregationBuffer, // update if a buffer is provided\n        sourceType: GL.FLOAT\n      });\n      if (needMin && needMax && combineMaxMin) {\n        results[id].maxMinBuffer = readPixelsToBuffer(maxMinFramebuffers[id], {\n          target: weights[id].maxMinBuffer, // update if a buffer is provided\n          sourceType: GL.FLOAT\n        });\n      } else {\n        if (needMin) {\n          results[id].minBuffer = readPixelsToBuffer(minFramebuffers[id], {\n            target: weights[id].minBuffer, // update if a buffer is provided\n            sourceType: GL.FLOAT\n          });\n        }\n        if (needMax) {\n          results[id].maxBuffer = readPixelsToBuffer(maxFramebuffers[id], {\n            target: weights[id].maxBuffer, // update if a buffer is provided\n            sourceType: GL.FLOAT\n          });\n        }\n      }\n    }\n    return results;\n  }\n\n  getAggregationModel(fp64 = false) {\n    const {gl, shaderCache} = this;\n    return new Model(gl, {\n      id: 'Gird-Aggregation-Model',\n      vs: fp64 ? AGGREGATE_TO_GRID_VS_FP64 : AGGREGATE_TO_GRID_VS,\n      fs: AGGREGATE_TO_GRID_FS,\n      modules: fp64 ? ['fp64', 'project64'] : ['project32'],\n      shaderCache,\n      vertexCount: 0,\n      drawMode: GL.POINTS\n    });\n  }\n\n  getAllAggregationModel(fp64 = false) {\n    const {gl, shaderCache} = this;\n    return new Model(gl, {\n      id: 'All-Aggregation-Model',\n      vs: AGGREGATE_ALL_VS_FP64,\n      fs: AGGREGATE_ALL_FS,\n      modules: ['fp64'],\n      shaderCache,\n      vertexCount: 1,\n      drawMode: GL.POINTS,\n      isInstanced: true,\n      instanceCount: 0,\n      attributes: {\n        position: [0, 0]\n      }\n    });\n  }\n\n  getMeanTransform(opts) {\n    if (this.meanTransform) {\n      this.meanTransform.update(opts);\n    } else {\n      this.meanTransform = new Transform(\n        this.gl,\n        Object.assign(\n          {},\n          {\n            vs: TRANSFORM_MEAN_VS,\n            _targetTextureVarying: 'meanValues'\n          },\n          opts\n        )\n      );\n    }\n    return this.meanTransform;\n  }\n\n  renderAggregateData(opts) {\n    const {cellSize, viewport, gridTransformMatrix, projectPoints} = opts;\n    const {\n      numCol,\n      numRow,\n      windowSize,\n      maxMinFramebuffers,\n      minFramebuffers,\n      maxFramebuffers,\n      weights\n    } = this.state;\n\n    const uProjectionMatrixFP64 = fp64ifyMatrix4(gridTransformMatrix);\n    const gridSize = [numCol, numRow];\n    const parameters = {\n      blend: true,\n      depthTest: false,\n      blendFunc: [GL.ONE, GL.ONE]\n    };\n    const moduleSettings = {viewport};\n    const uniforms = {\n      windowSize,\n      cellSize,\n      gridSize,\n      uProjectionMatrix: gridTransformMatrix,\n      uProjectionMatrixFP64,\n      projectPoints\n    };\n\n    for (const id in weights) {\n      const {needMin, needMax} = weights[id];\n      const combineMaxMin = needMin && needMax && weights[id].combineMaxMin;\n      this.renderToWeightsTexture({id, parameters, moduleSettings, uniforms, gridSize});\n      if (combineMaxMin) {\n        this.renderToMaxMinTexture({\n          id,\n          parameters: Object.assign({}, parameters, {blendEquation: MAX_MIN_BLEND_EQUATION}),\n          gridSize,\n          minOrMaxFb: maxMinFramebuffers[id],\n          clearParams: {clearColor: [0, 0, 0, MAX_32_BIT_FLOAT]},\n          combineMaxMin\n        });\n      } else {\n        if (needMin) {\n          this.renderToMaxMinTexture({\n            id,\n            parameters: Object.assign({}, parameters, {blendEquation: MIN_BLEND_EQUATION}),\n            gridSize,\n            minOrMaxFb: minFramebuffers[id],\n            clearParams: {clearColor: [MAX_32_BIT_FLOAT, MAX_32_BIT_FLOAT, MAX_32_BIT_FLOAT, 0]},\n            combineMaxMin\n          });\n        }\n        if (needMax) {\n          this.renderToMaxMinTexture({\n            id,\n            parameters: Object.assign({}, parameters, {blendEquation: MAX_BLEND_EQUATION}),\n            gridSize,\n            minOrMaxFb: maxFramebuffers[id],\n            combineMaxMin\n          });\n        }\n      }\n    }\n  }\n\n  // render all aggregated grid-cells to generate Min, Max or MaxMin data texture\n  renderToMaxMinTexture(opts) {\n    const {id, parameters, gridSize, minOrMaxFb, combineMaxMin, clearParams = {}} = opts;\n    const {framebuffers} = this.state;\n    const {gl, allAggregationModel} = this;\n\n    minOrMaxFb.bind();\n    gl.viewport(0, 0, gridSize[0], gridSize[1]);\n    withParameters(gl, clearParams, () => {\n      gl.clear(gl.COLOR_BUFFER_BIT);\n    });\n    allAggregationModel.draw({\n      parameters,\n      uniforms: {\n        uSampler: framebuffers[id].texture,\n        gridSize,\n        combineMaxMin\n      }\n    });\n    minOrMaxFb.unbind();\n  }\n\n  // render all data points to aggregate weights\n  renderToWeightsTexture(opts) {\n    const {id, parameters, moduleSettings, uniforms, gridSize} = opts;\n    const {framebuffers, equations, weightAttributes, weights} = this.state;\n    const {gl, gridAggregationModel} = this;\n    const {operation} = weights[id];\n\n    framebuffers[id].bind();\n    gl.viewport(0, 0, gridSize[0], gridSize[1]);\n    const clearColor =\n      operation === AGGREGATION_OPERATION.MIN\n        ? [MAX_32_BIT_FLOAT, MAX_32_BIT_FLOAT, MAX_32_BIT_FLOAT, 0]\n        : [0, 0, 0, 0];\n    withParameters(gl, {clearColor}, () => {\n      gl.clear(gl.COLOR_BUFFER_BIT);\n    });\n\n    const attributes = {weights: weightAttributes[id]};\n    gridAggregationModel.draw({\n      parameters: Object.assign({}, parameters, {blendEquation: equations[id]}),\n      moduleSettings,\n      uniforms,\n      attributes\n    });\n    framebuffers[id].unbind();\n\n    if (operation === AGGREGATION_OPERATION.MEAN) {\n      const {meanTextures, textures} = this.state;\n      const transformOptions = {\n        _sourceTextures: {aggregationValues: meanTextures[id]}, // contains aggregated data\n        _targetTexture: textures[id], // store mean values,\n        elementCount: textures[id].width * textures[id].height\n      };\n      const meanTransform = this.getMeanTransform(transformOptions);\n      meanTransform.run({\n        parameters: {\n          blend: false,\n          depthTest: false\n        }\n      });\n\n      // update framebuffer with mean results so readPixelsToBuffer returns mean values\n      framebuffers[id].attach({[GL.COLOR_ATTACHMENT0]: textures[id]});\n    }\n  }\n\n  runAggregationOnGPU(opts) {\n    this.updateModels(opts);\n    this.setupFramebuffers(opts);\n    this.renderAggregateData(opts);\n    return this.getAggregateData(opts);\n  }\n\n  // set up framebuffer for each weight\n  /* eslint-disable complexity, max-depth */\n  setupFramebuffers(opts) {\n    const {\n      numCol,\n      numRow,\n      textures,\n      framebuffers,\n      maxMinFramebuffers,\n      minFramebuffers,\n      maxFramebuffers,\n      resources,\n      meanTextures,\n      equations,\n      weights\n    } = this.state;\n    const framebufferSize = {width: numCol, height: numRow};\n    for (const id in weights) {\n      const {needMin, needMax, combineMaxMin, operation} = weights[id];\n      textures[id] =\n        weights[id].aggregationTexture ||\n        textures[id] ||\n        getFloatTexture(this.gl, {id: `${id}-texture`, width: numCol, height: numRow});\n      textures[id].resize(framebufferSize);\n      let texture = textures[id];\n      if (operation === AGGREGATION_OPERATION.MEAN) {\n        // For MEAN, we first aggregatet into a temp texture\n        meanTextures[id] =\n          meanTextures[id] ||\n          getFloatTexture(this.gl, {id: `${id}-mean-texture`, width: numCol, height: numRow});\n        meanTextures[id].resize(framebufferSize);\n        texture = meanTextures[id];\n      }\n      if (framebuffers[id]) {\n        framebuffers[id].attach({[GL.COLOR_ATTACHMENT0]: texture});\n      } else {\n        framebuffers[id] = getFramebuffer(this.gl, {\n          id: `${id}-fb`,\n          width: numCol,\n          height: numRow,\n          texture\n        });\n      }\n      framebuffers[id].resize(framebufferSize);\n      equations[id] = EQUATION_MAP[operation];\n      // For min/max framebuffers will use default size 1X1\n      if (needMin || needMax) {\n        if (needMin && needMax && combineMaxMin) {\n          if (!maxMinFramebuffers[id]) {\n            resources[`${id}-maxMin`] = getFloatTexture(this.gl, {id: `${id}-maxMinTex`});\n            maxMinFramebuffers[id] = getFramebuffer(this.gl, {\n              id: `${id}-maxMinFb`,\n              texture: resources[`${id}-maxMin`]\n            });\n          }\n        } else {\n          if (needMin) {\n            if (!minFramebuffers[id]) {\n              resources[`${id}-min`] = getFloatTexture(this.gl, {id: `${id}-minTex`});\n              minFramebuffers[id] = getFramebuffer(this.gl, {\n                id: `${id}-minFb`,\n                texture: resources[`${id}-min`]\n              });\n            }\n          }\n          if (needMax) {\n            if (!maxFramebuffers[id]) {\n              resources[`${id}-max`] = getFloatTexture(this.gl, {id: `${id}-maxTex`});\n              maxFramebuffers[id] = getFramebuffer(this.gl, {\n                id: `${id}-maxFb`,\n                texture: resources[`${id}-max`]\n              });\n            }\n          }\n        }\n      }\n    }\n  }\n  /* eslint-enable complexity, max-depth */\n\n  setupModels(fp64 = false) {\n    if (this.gridAggregationModel) {\n      this.gridAggregationModel.delete();\n    }\n    this.gridAggregationModel = this.getAggregationModel(fp64);\n    if (this.allAggregationModel) {\n      this.allAggregationModel.delete();\n    }\n    this.allAggregationModel = this.getAllAggregationModel(fp64);\n  }\n\n  // set up buffers for all weights\n  setupWeightAttributes(opts) {\n    const {weightAttributes, vertexCount, weights, resources} = this.state;\n    for (const id in weights) {\n      const {values} = weights[id];\n      // values can be Array, Float32Array or Buffer\n      if (Array.isArray(values) || values.constructor === Float32Array) {\n        log.assert(values.length / 3 === vertexCount);\n        const typedArray = Array.isArray(values) ? new Float32Array(values) : values;\n        if (weightAttributes[id] instanceof Buffer) {\n          weightAttributes[id].setData(typedArray);\n        } else {\n          resources[`${id}-buffer`] = new Buffer(this.gl, typedArray);\n          weightAttributes[id] = resources[`${id}-buffer`];\n        }\n      } else {\n        // log.assert((values instanceof Attribute) || (values instanceof Buffer));\n        log.assert(values instanceof Buffer);\n        weightAttributes[id] = values;\n      }\n    }\n  }\n\n  /* eslint-disable max-statements */\n  updateModels(opts) {\n    const {gl} = this;\n    const {positions, positions64xyLow, changeFlags} = opts;\n    const {numCol, numRow} = this.state;\n\n    let {positionsBuffer, positions64xyLowBuffer} = this.state;\n\n    const aggregationModelAttributes = {};\n\n    let createPos64xyLow = false;\n    if (opts.fp64 !== this.state.fp64) {\n      this.setupModels(opts.fp64);\n      this.setState({fp64: opts.fp64});\n      if (opts.fp64) {\n        createPos64xyLow = true;\n      }\n    }\n\n    if (changeFlags.dataChanged || !positionsBuffer) {\n      if (positionsBuffer) {\n        positionsBuffer.delete();\n      }\n      const vertexCount = positions.length / 2;\n      // positionsBuffer = new Buffer(gl, {size: 2, data: new Float32Array(positions)});\n      positionsBuffer = new Buffer(gl, new Float32Array(positions));\n      createPos64xyLow = opts.fp64;\n      Object.assign(aggregationModelAttributes, {\n        positions: positionsBuffer\n      });\n      this.setState({positionsBuffer, vertexCount});\n\n      this.setupWeightAttributes(opts);\n      this.gridAggregationModel.setVertexCount(vertexCount);\n    }\n\n    if (createPos64xyLow) {\n      log.assert(positions64xyLow);\n      if (positions64xyLowBuffer) {\n        positions64xyLowBuffer.delete();\n      }\n      positions64xyLowBuffer = new Buffer(gl, {size: 2, data: new Float32Array(positions64xyLow)});\n      Object.assign(aggregationModelAttributes, {\n        positions64xyLow: positions64xyLowBuffer\n      });\n      this.setState({positions64xyLowBuffer});\n    }\n\n    this.gridAggregationModel.setAttributes(aggregationModelAttributes);\n\n    if (changeFlags.cellSizeChanged || changeFlags.viewportChanged) {\n      this.allAggregationModel.setInstanceCount(numCol * numRow);\n    }\n  }\n  /* eslint-enable max-statements */\n}\n"],"file":"gpu-grid-aggregator.js"}