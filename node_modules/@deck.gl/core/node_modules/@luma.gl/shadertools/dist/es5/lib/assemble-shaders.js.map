{"version":3,"sources":["../../../src/lib/assemble-shaders.js"],"names":["SHADER_TYPE","VERTEX_SHADER","FRAGMENT_SHADER","HOOK_FUNCTIONS","MODULE_INJECTIONS","FRAGMENT_SHADER_PROLOGUE","createShaderHook","hook","opts","trim","split","stage","signature","name","replace","Object","assign","createModuleInjection","moduleName","injection","order","shaderStage","slice","assembleShaders","gl","vs","fs","modules","assembleShader","source","type","getUniforms","assembleGetUniforms","assembleModuleMap","id","defines","inject","prologue","log","isVertex","sourceLines","glslVersion","versionLine","coreSource","indexOf","join","allDefines","forEach","module","getDefines","assembledSource","getShaderName","getShaderType","getApplicationDefines","injectStandardStubs","hookInjections","mainInjections","key","match","checkDeprecations","moduleSource","getModuleSource","injections","push","getHookFunctions","uniforms","moduleUniforms","result","shaderModule","toUpperCase","injectShaderName","count","sourceText","define","value","Number","isFinite","hookFunctions","hookName","hookFunction","header","sort","a","b","footer"],"mappings":";;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;;;AAGA,IAAMA,WAAW,sEACdC,wBADc,EACE,QADF,kDAEdC,0BAFc,EAEI,UAFJ,gBAAjB;AAKA,IAAMC,cAAc,4EACjBF,wBADiB,EACD,EADC,qDAEjBC,0BAFiB,EAEC,EAFD,mBAApB;AAKA,IAAME,iBAAiB,GAAG,EAA1B;AAIA,IAAMC,wBAAwB,+BAA9B;;AAKO,SAASC,gBAAT,CAA0BC,IAA1B,EAA2C;AAAA,MAAXC,IAAW,uEAAJ,EAAI;AAChDD,EAAAA,IAAI,GAAGA,IAAI,CAACE,IAAL,EAAP;;AADgD,oBAErBF,IAAI,CAACG,KAAL,CAAW,GAAX,CAFqB;AAAA;AAAA,MAEzCC,KAFyC;AAAA,MAElCC,SAFkC;;AAGhD,MAAMC,IAAI,GAAGN,IAAI,CAACO,OAAL,CAAa,MAAb,EAAqB,EAArB,CAAb;AACAX,EAAAA,cAAc,CAACQ,KAAD,CAAd,CAAsBE,IAAtB,IAA8BE,MAAM,CAACC,MAAP,CAAcR,IAAd,EAAoB;AAACI,IAAAA,SAAS,EAATA;AAAD,GAApB,CAA9B;AACD;;AAEM,SAASK,qBAAT,CAA+BC,UAA/B,EAA2CV,IAA3C,EAAiD;AAAA,MAC/CD,IAD+C,GACjBC,IADiB,CAC/CD,IAD+C;AAAA,MACzCY,SADyC,GACjBX,IADiB,CACzCW,SADyC;AAAA,oBACjBX,IADiB,CAC9BY,KAD8B;AAAA,MAC9BA,KAD8B,4BACtB,CADsB;AAEtD,MAAMC,WAAW,GAAGd,IAAI,CAACe,KAAL,CAAW,CAAX,EAAc,CAAd,CAApB;AAEAlB,EAAAA,iBAAiB,CAACc,UAAD,CAAjB,GAAgCd,iBAAiB,CAACc,UAAD,CAAjB,IAAiC,EAAjE;AACAd,EAAAA,iBAAiB,CAACc,UAAD,CAAjB,CAA8BG,WAA9B,IAA6CjB,iBAAiB,CAACc,UAAD,CAAjB,CAA8BG,WAA9B,KAA8C,EAA3F;AAEA,qBAAO,CAACjB,iBAAiB,CAACc,UAAD,CAAjB,CAA8BG,WAA9B,EAA2Cd,IAA3C,CAAR,EAA0D,kCAA1D;AAEAH,EAAAA,iBAAiB,CAACc,UAAD,CAAjB,CAA8BG,WAA9B,EAA2Cd,IAA3C,IAAmD;AACjDY,IAAAA,SAAS,EAATA,SADiD;AAEjDC,IAAAA,KAAK,EAALA;AAFiD,GAAnD;AAID;;AAGM,SAASG,eAAT,CAAyBC,EAAzB,EAAwC;AAAA,MAAXhB,IAAW,uEAAJ,EAAI;AAAA,MACtCiB,EADsC,GAC5BjB,IAD4B,CACtCiB,EADsC;AAAA,MAClCC,EADkC,GAC5BlB,IAD4B,CAClCkB,EADkC;AAE7C,MAAMC,OAAO,GAAG,oCAAenB,IAAI,CAACmB,OAAL,IAAgB,EAA/B,CAAhB;AACA,SAAO;AACLH,IAAAA,EAAE,EAAFA,EADK;AAELC,IAAAA,EAAE,EAAEG,cAAc,CAACJ,EAAD,EAAKT,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBR,IAAlB,EAAwB;AAACqB,MAAAA,MAAM,EAAEJ,EAAT;AAAaK,MAAAA,IAAI,EAAE7B,wBAAnB;AAAkC0B,MAAAA,OAAO,EAAPA;AAAlC,KAAxB,CAAL,CAFb;AAGLD,IAAAA,EAAE,EAAEE,cAAc,CAACJ,EAAD,EAAKT,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBR,IAAlB,EAAwB;AAACqB,MAAAA,MAAM,EAAEH,EAAT;AAAaI,MAAAA,IAAI,EAAE5B,0BAAnB;AAAoCyB,MAAAA,OAAO,EAAPA;AAApC,KAAxB,CAAL,CAHb;AAILI,IAAAA,WAAW,EAAEC,mBAAmB,CAACL,OAAD,CAJ3B;AAKLA,IAAAA,OAAO,EAAEM,iBAAiB,CAACN,OAAD;AALrB,GAAP;AAOD;;AAID,SAASC,cAAT,CACEJ,EADF,QAGE;AAAA,MADCU,EACD,QADCA,EACD;AAAA,MADKL,MACL,QADKA,MACL;AAAA,MADaC,IACb,QADaA,IACb;AAAA,0BADmBH,OACnB;AAAA,MADmBA,OACnB,6BAD6B,EAC7B;AAAA,0BADiCQ,OACjC;AAAA,MADiCA,OACjC,6BAD2C,EAC3C;AAAA,yBAD+CC,MAC/C;AAAA,MAD+CA,MAC/C,4BADwD,EACxD;AAAA,2BAD4DC,QAC5D;AAAA,MAD4DA,QAC5D,8BADuE,IACvE;AAAA,MAD6EC,GAC7E,QAD6EA,GAC7E;AACA,qBAAO,OAAOT,MAAP,KAAkB,QAAzB,EAAmC,gCAAnC;AAEA,MAAMU,QAAQ,GAAGT,IAAI,KAAK7B,wBAA1B;AAEA,MAAMuC,WAAW,GAAGX,MAAM,CAACnB,KAAP,CAAa,IAAb,CAApB;AACA,MAAI+B,WAAW,GAAG,GAAlB;AACA,MAAIC,WAAW,GAAG,EAAlB;AACA,MAAIC,UAAU,GAAGd,MAAjB;;AAGA,MAAIW,WAAW,CAAC,CAAD,CAAX,CAAeI,OAAf,CAAuB,WAAvB,MAAwC,CAA5C,EAA+C;AAC7CH,IAAAA,WAAW,GAAG,GAAd;AACAC,IAAAA,WAAW,GAAGF,WAAW,CAAC,CAAD,CAAzB;AACAG,IAAAA,UAAU,GAAGH,WAAW,CAAClB,KAAZ,CAAkB,CAAlB,EAAqBuB,IAArB,CAA0B,IAA1B,CAAb;AACD;;AAGD,MAAMC,UAAU,GAAG,EAAnB;AACAnB,EAAAA,OAAO,CAACoB,OAAR,CAAgB,UAAAC,MAAM,EAAI;AACxBjC,IAAAA,MAAM,CAACC,MAAP,CAAc8B,UAAd,EAA0BE,MAAM,CAACC,UAAP,EAA1B;AACD,GAFD;AAGAlC,EAAAA,MAAM,CAACC,MAAP,CAAc8B,UAAd,EAA0BX,OAA1B;AAKA,MAAIe,eAAe,GAAGb,QAAQ,aAE9BK,WAF8B,eAG9BS,aAAa,CAAC;AAACjB,IAAAA,EAAE,EAAFA,EAAD;AAAKL,IAAAA,MAAM,EAANA,MAAL;AAAaC,IAAAA,IAAI,EAAJA;AAAb,GAAD,CAHiB,eAI9BsB,aAAa,CAAC;AAACtB,IAAAA,IAAI,EAAJA;AAAD,GAAD,CAJiB,eAK9B,+CAAyBN,EAAzB,CAL8B,eAM9B,wCAAkBA,EAAlB,EAAsBiB,WAAtB,EAAmC,CAACF,QAApC,CAN8B,eAO9Bc,qBAAqB,CAACP,UAAD,CAPS,eAQ9BP,QAAQ,GAAG,EAAH,GAAQlC,wBARc,oBAUvBqC,WAVuB,OAA9B;AAcA,MAAIY,mBAAmB,GAAG,KAA1B;AACA,MAAMC,cAAc,GAAG,EAAvB;AACA,MAAMC,cAAc,GAAG,EAAvB;;AAEA,OAAK,IAAMC,GAAX,IAAkBrB,MAAlB,EAA0B;AACxB,QAAMjB,SAAS,GACb,OAAOiB,MAAM,CAACqB,GAAD,CAAb,KAAuB,QAAvB,GAAkC;AAACtC,MAAAA,SAAS,EAAEiB,MAAM,CAACqB,GAAD,CAAlB;AAAyBrC,MAAAA,KAAK,EAAE;AAAhC,KAAlC,GAAuEgB,MAAM,CAACqB,GAAD,CAD/E;;AAEA,QAAIA,GAAG,CAACC,KAAJ,CAAU,UAAV,CAAJ,EAA2B;AACzB,UAAID,GAAG,CAAC,CAAD,CAAH,KAAW,GAAf,EAAoB;AAClBD,QAAAA,cAAc,CAACC,GAAD,CAAd,GAAsB,CAACtC,SAAD,CAAtB;AACD,OAFD,MAEO;AACLoC,QAAAA,cAAc,CAACE,GAAD,CAAd,GAAsB,CAACtC,SAAD,CAAtB;AACD;AACF,KAND,MAMO;AAELqC,MAAAA,cAAc,CAACC,GAAD,CAAd,GAAsB,CAACtC,SAAD,CAAtB;AACD;AACF;;AA1DD;AAAA;AAAA;;AAAA;AA4DA,yBAAqBQ,OAArB,8HAA8B;AAAA,UAAnBqB,MAAmB;;AAC5B,cAAQA,MAAM,CAACnC,IAAf;AACE,aAAK,QAAL;AACEyC,UAAAA,mBAAmB,GAAG,IAAtB;AACA;;AAEF;AACEN,UAAAA,MAAM,CAACW,iBAAP,CAAyBhB,UAAzB,EAAqCL,GAArC;AACA,cAAMsB,YAAY,GAAGZ,MAAM,CAACa,eAAP,CAAuB/B,IAAvB,EAA6BW,WAA7B,CAArB;AAEAS,UAAAA,eAAe,IAAIU,YAAnB;;AAEA,cAAIxD,iBAAiB,CAAC4C,MAAM,CAACnC,IAAR,CAArB,EAAoC;AAClC,gBAAMiD,UAAU,GAAG1D,iBAAiB,CAAC4C,MAAM,CAACnC,IAAR,CAAjB,CAA+BiB,IAA/B,CAAnB;;AACA,iBAAK,IAAM2B,IAAX,IAAkBK,UAAlB,EAA8B;AAC5B,kBAAIL,IAAG,CAACC,KAAJ,CAAU,WAAV,CAAJ,EAA4B;AAC1BF,gBAAAA,cAAc,CAACC,IAAD,CAAd,GAAsBD,cAAc,CAACC,IAAD,CAAd,IAAuB,EAA7C;;AACAD,gBAAAA,cAAc,CAACC,IAAD,CAAd,CAAoBM,IAApB,CAAyBD,UAAU,CAACL,IAAD,CAAnC;AACD,eAHD,MAGO;AACLF,gBAAAA,cAAc,CAACE,IAAD,CAAd,GAAsBF,cAAc,CAACE,IAAD,CAAd,IAAuB,EAA7C;;AACAF,gBAAAA,cAAc,CAACE,IAAD,CAAd,CAAoBM,IAApB,CAAyBD,UAAU,CAACL,IAAD,CAAnC;AACD;AACF;AACF;;AAtBL;AAwBD;AArFD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAuFAP,EAAAA,eAAe,IAAIc,gBAAgB,CAAClC,IAAD,EAAOyB,cAAP,CAAnC;AAGAL,EAAAA,eAAe,IAAIP,UAAnB;AAGAO,EAAAA,eAAe,GAAG,8BAAaA,eAAb,EAA8BpB,IAA9B,EAAoC0B,cAApC,EAAoDF,mBAApD,CAAlB;AAEA,SAAOJ,eAAP;AACD;;AAMD,SAASlB,mBAAT,CAA6BL,OAA7B,EAAsC;AACpC,SAAO,SAASI,WAAT,CAAqBvB,IAArB,EAA2B;AAChC,QAAMyD,QAAQ,GAAG,EAAjB;AADgC;AAAA;AAAA;;AAAA;AAEhC,4BAAqBtC,OAArB,mIAA8B;AAAA,YAAnBqB,MAAmB;AAG5B,YAAMkB,cAAc,GAAGlB,MAAM,CAACjB,WAAP,CAAmBvB,IAAnB,EAAyByD,QAAzB,CAAvB;AACAlD,QAAAA,MAAM,CAACC,MAAP,CAAciD,QAAd,EAAwBC,cAAxB;AACD;AAP+B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAQhC,WAAOD,QAAP;AACD,GATD;AAUD;;AAKD,SAAShC,iBAAT,CAA2BN,OAA3B,EAAoC;AAClC,MAAMwC,MAAM,GAAG,EAAf;AADkC;AAAA;AAAA;;AAAA;AAElC,0BAAyBxC,OAAzB,mIAAkC;AAAA,UAAvBT,UAAuB;AAChC,UAAMkD,YAAY,GAAG,qCAAgBlD,UAAhB,CAArB;AACAiD,MAAAA,MAAM,CAACjD,UAAD,CAAN,GAAqBkD,YAArB;AACD;AALiC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAMlC,SAAOD,MAAP;AACD;;AAED,SAASf,aAAT,QAA+B;AAAA,MAAPtB,IAAO,SAAPA,IAAO;AAC7B,yCACoB9B,WAAW,CAAC8B,IAAD,CAAX,CAAkBuC,WAAlB,EADpB;AAGD;;AAKD,SAASlB,aAAT,QAA2C;AAAA,MAAnBjB,EAAmB,SAAnBA,EAAmB;AAAA,MAAfL,MAAe,SAAfA,MAAe;AAAA,MAAPC,IAAO,SAAPA,IAAO;AACzC,MAAMwC,gBAAgB,GAAGpC,EAAE,IAAI,OAAOA,EAAP,KAAc,QAApB,IAAgCL,MAAM,CAACe,OAAP,CAAe,aAAf,MAAkC,CAAC,CAA5F;AACA,SAAO0B,gBAAgB,mCAEHpC,EAFG,cAEGlC,WAAW,CAAC8B,IAAD,CAFd,YAKnB,EALJ;AAMD;;AAGD,SAASuB,qBAAT,GAA6C;AAAA,MAAdlB,OAAc,uEAAJ,EAAI;AAC3C,MAAIoC,KAAK,GAAG,CAAZ;AACA,MAAIC,UAAU,GAAG,EAAjB;;AACA,OAAK,IAAMC,MAAX,IAAqBtC,OAArB,EAA8B;AAC5B,QAAIoC,KAAK,KAAK,CAAd,EAAiB;AACfC,MAAAA,UAAU,IAAI,4BAAd;AACD;;AACDD,IAAAA,KAAK;AAEL,QAAMG,KAAK,GAAGvC,OAAO,CAACsC,MAAD,CAArB;;AACA,QAAIC,KAAK,IAAIC,MAAM,CAACC,QAAP,CAAgBF,KAAhB,CAAb,EAAqC;AACnCF,MAAAA,UAAU,sBAAeC,MAAM,CAACJ,WAAP,EAAf,cAAuClC,OAAO,CAACsC,MAAD,CAA9C,OAAV;AACD;AACF;;AACD,MAAIF,KAAK,KAAK,CAAd,EAAiB;AACfC,IAAAA,UAAU,IAAI,IAAd;AACD;;AACD,SAAOA,UAAP;AACD;;AAED,SAASR,gBAAT,CAA0B3C,WAA1B,EAAuCkC,cAAvC,EAAuD;AACrD,MAAIY,MAAM,GAAG,EAAb;AACA,MAAMU,aAAa,GAAG1E,cAAc,CAACkB,WAAD,CAApC;;AACA,OAAK,IAAMyD,QAAX,IAAuBD,aAAvB,EAAsC;AACpC,QAAME,YAAY,GAAGF,aAAa,CAACC,QAAD,CAAlC;AACAX,IAAAA,MAAM,mBAAYY,YAAY,CAACnE,SAAzB,SAAN;;AACA,QAAImE,YAAY,CAACC,MAAjB,EAAyB;AACvBb,MAAAA,MAAM,gBAASY,YAAY,CAACC,MAAtB,CAAN;AACD;;AACD,QAAIzB,cAAc,CAACuB,QAAD,CAAlB,EAA8B;AAC5B,UAAMhB,UAAU,GAAGP,cAAc,CAACuB,QAAD,CAAjC;AACAhB,MAAAA,UAAU,CAACmB,IAAX,CAAgB,UAACC,CAAD,EAAIC,CAAJ;AAAA,eAAUD,CAAC,CAAC9D,KAAF,GAAU+D,CAAC,CAAC/D,KAAtB;AAAA,OAAhB;AAF4B;AAAA;AAAA;;AAAA;AAG5B,8BAAwB0C,UAAxB,mIAAoC;AAAA,cAAzB3C,SAAyB;AAClCgD,UAAAA,MAAM,gBAAShD,SAAS,CAACA,SAAnB,OAAN;AACD;AAL2B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAM7B;;AACD,QAAI4D,YAAY,CAACK,MAAjB,EAAyB;AACvBjB,MAAAA,MAAM,gBAASY,YAAY,CAACK,MAAtB,CAAN;AACD;;AACDjB,IAAAA,MAAM,IAAI,KAAV;AACD;;AAED,SAAOA,MAAP;AACD","sourcesContent":["import {VERTEX_SHADER, FRAGMENT_SHADER} from './constants';\nimport {resolveModules, getShaderModule} from './resolve-modules';\nimport {getPlatformShaderDefines, getVersionDefines} from './platform-defines';\nimport injectShader from './inject-shader';\nimport {assert} from '../utils';\n/* eslint-disable max-depth, complexity */\n\nconst SHADER_TYPE = {\n  [VERTEX_SHADER]: 'vertex',\n  [FRAGMENT_SHADER]: 'fragment'\n};\n\nconst HOOK_FUNCTIONS = {\n  [VERTEX_SHADER]: {},\n  [FRAGMENT_SHADER]: {}\n};\n\nconst MODULE_INJECTIONS = {};\n\n// Precision prologue to inject before functions are injected in shader\n// TODO - extract any existing prologue in the fragment source and move it up...\nconst FRAGMENT_SHADER_PROLOGUE = `\\\nprecision highp float;\n\n`;\n\nexport function createShaderHook(hook, opts = {}) {\n  hook = hook.trim();\n  const [stage, signature] = hook.split(':');\n  const name = hook.replace(/\\(.+/, '');\n  HOOK_FUNCTIONS[stage][name] = Object.assign(opts, {signature});\n}\n\nexport function createModuleInjection(moduleName, opts) {\n  const {hook, injection, order = 0} = opts;\n  const shaderStage = hook.slice(0, 2);\n\n  MODULE_INJECTIONS[moduleName] = MODULE_INJECTIONS[moduleName] || {};\n  MODULE_INJECTIONS[moduleName][shaderStage] = MODULE_INJECTIONS[moduleName][shaderStage] || {};\n\n  assert(!MODULE_INJECTIONS[moduleName][shaderStage][hook], 'Module injection already created');\n\n  MODULE_INJECTIONS[moduleName][shaderStage][hook] = {\n    injection,\n    order\n  };\n}\n\n// Inject a list of modules\nexport function assembleShaders(gl, opts = {}) {\n  const {vs, fs} = opts;\n  const modules = resolveModules(opts.modules || []);\n  return {\n    gl,\n    vs: assembleShader(gl, Object.assign({}, opts, {source: vs, type: VERTEX_SHADER, modules})),\n    fs: assembleShader(gl, Object.assign({}, opts, {source: fs, type: FRAGMENT_SHADER, modules})),\n    getUniforms: assembleGetUniforms(modules),\n    modules: assembleModuleMap(modules)\n  };\n}\n\n// Pulls together complete source code for either a vertex or a fragment shader\n// adding prologues, requested module chunks, and any final injections.\nfunction assembleShader(\n  gl,\n  {id, source, type, modules = [], defines = {}, inject = {}, prologue = true, log}\n) {\n  assert(typeof source === 'string', 'shader source must be a string');\n\n  const isVertex = type === VERTEX_SHADER;\n\n  const sourceLines = source.split('\\n');\n  let glslVersion = 100;\n  let versionLine = '';\n  let coreSource = source;\n  // Extract any version directive string from source.\n  // TODO : keep all pre-processor statements at the begining of the shader.\n  if (sourceLines[0].indexOf('#version ') === 0) {\n    glslVersion = 300; // TODO - regexp that matches atual version number\n    versionLine = sourceLines[0];\n    coreSource = sourceLines.slice(1).join('\\n');\n  }\n\n  // Combine Module and Application Defines\n  const allDefines = {};\n  modules.forEach(module => {\n    Object.assign(allDefines, module.getDefines());\n  });\n  Object.assign(allDefines, defines);\n\n  // Add platform defines (use these to work around platform-specific bugs and limitations)\n  // Add common defines (GLSL version compatibility, feature detection)\n  // Add precision declaration for fragment shaders\n  let assembledSource = prologue\n    ? `\\\n${versionLine}\n${getShaderName({id, source, type})}\n${getShaderType({type})}\n${getPlatformShaderDefines(gl)}\n${getVersionDefines(gl, glslVersion, !isVertex)}\n${getApplicationDefines(allDefines)}\n${isVertex ? '' : FRAGMENT_SHADER_PROLOGUE}\n`\n    : `${versionLine}\n`;\n\n  // Add source of dependent modules in resolved order\n  let injectStandardStubs = false;\n  const hookInjections = {};\n  const mainInjections = {};\n\n  for (const key in inject) {\n    const injection =\n      typeof inject[key] === 'string' ? {injection: inject[key], order: 0} : inject[key];\n    if (key.match(/^(v|f)s:/)) {\n      if (key[3] === '#') {\n        mainInjections[key] = [injection];\n      } else {\n        hookInjections[key] = [injection];\n      }\n    } else {\n      // Regex injection\n      mainInjections[key] = [injection];\n    }\n  }\n\n  for (const module of modules) {\n    switch (module.name) {\n      case 'inject':\n        injectStandardStubs = true;\n        break;\n\n      default:\n        module.checkDeprecations(coreSource, log);\n        const moduleSource = module.getModuleSource(type, glslVersion);\n        // Add the module source, and a #define that declares it presence\n        assembledSource += moduleSource;\n\n        if (MODULE_INJECTIONS[module.name]) {\n          const injections = MODULE_INJECTIONS[module.name][type];\n          for (const key in injections) {\n            if (key.match(/^(v|f)s:#/)) {\n              mainInjections[key] = mainInjections[key] || [];\n              mainInjections[key].push(injections[key]);\n            } else {\n              hookInjections[key] = hookInjections[key] || [];\n              hookInjections[key].push(injections[key]);\n            }\n          }\n        }\n    }\n  }\n\n  assembledSource += getHookFunctions(type, hookInjections);\n\n  // Add the version directive and actual source of this shader\n  assembledSource += coreSource;\n\n  // Apply any requested shader injections\n  assembledSource = injectShader(assembledSource, type, mainInjections, injectStandardStubs);\n\n  return assembledSource;\n}\n\n// Returns a combined `getUniforms` covering the options for all the modules,\n// the created function will pass on options to the inidividual `getUniforms`\n// function of each shader module and combine the results into one object that\n// can be passed to setUniforms.\nfunction assembleGetUniforms(modules) {\n  return function getUniforms(opts) {\n    const uniforms = {};\n    for (const module of modules) {\n      // `modules` is already sorted by dependency level. This guarantees that\n      // modules have access to the uniforms that are generated by their dependencies.\n      const moduleUniforms = module.getUniforms(opts, uniforms);\n      Object.assign(uniforms, moduleUniforms);\n    }\n    return uniforms;\n  };\n}\n\n// Returns a map with module names as keys, resolving to their module definitions\n// The presence of a key indicates that the module is available in this program,\n// whether directly included, or through a dependency of some other module\nfunction assembleModuleMap(modules) {\n  const result = {};\n  for (const moduleName of modules) {\n    const shaderModule = getShaderModule(moduleName);\n    result[moduleName] = shaderModule;\n  }\n  return result;\n}\n\nfunction getShaderType({type}) {\n  return `\n#define SHADER_TYPE_${SHADER_TYPE[type].toUpperCase()}\n`;\n}\n\n// Generate \"glslify-compatible\" SHADER_NAME defines\n// These are understood by the GLSL error parsing function\n// If id is provided and no SHADER_NAME constant is present in source, create one\nfunction getShaderName({id, source, type}) {\n  const injectShaderName = id && typeof id === 'string' && source.indexOf('SHADER_NAME') === -1;\n  return injectShaderName\n    ? `\n#define SHADER_NAME ${id}_${SHADER_TYPE[type]}\n\n`\n    : '';\n}\n\n// Generates application defines from an object\nfunction getApplicationDefines(defines = {}) {\n  let count = 0;\n  let sourceText = '';\n  for (const define in defines) {\n    if (count === 0) {\n      sourceText += '\\n// APPLICATION DEFINES\\n';\n    }\n    count++;\n\n    const value = defines[define];\n    if (value || Number.isFinite(value)) {\n      sourceText += `#define ${define.toUpperCase()} ${defines[define]}\\n`;\n    }\n  }\n  if (count === 0) {\n    sourceText += '\\n';\n  }\n  return sourceText;\n}\n\nfunction getHookFunctions(shaderStage, hookInjections) {\n  let result = '';\n  const hookFunctions = HOOK_FUNCTIONS[shaderStage];\n  for (const hookName in hookFunctions) {\n    const hookFunction = hookFunctions[hookName];\n    result += `void ${hookFunction.signature} {\\n`;\n    if (hookFunction.header) {\n      result += `  ${hookFunction.header}`;\n    }\n    if (hookInjections[hookName]) {\n      const injections = hookInjections[hookName];\n      injections.sort((a, b) => a.order - b.order);\n      for (const injection of injections) {\n        result += `  ${injection.injection}\\n`;\n      }\n    }\n    if (hookFunction.footer) {\n      result += `  ${hookFunction.footer}`;\n    }\n    result += '}\\n';\n  }\n\n  return result;\n}\n"],"file":"assemble-shaders.js"}